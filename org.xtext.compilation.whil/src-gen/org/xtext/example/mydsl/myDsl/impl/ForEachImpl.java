/**
 * generated by Xtext 2.10.0
 */
package org.xtext.example.mydsl.myDsl.impl;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import org.xtext.example.mydsl.myDsl.Commandes;
import org.xtext.example.mydsl.myDsl.Expression;
import org.xtext.example.mydsl.myDsl.ForEach;
import org.xtext.example.mydsl.myDsl.MyDslPackage;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>For Each</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * <ul>
 *   <li>{@link org.xtext.example.mydsl.myDsl.impl.ForEachImpl#getElem <em>Elem</em>}</li>
 *   <li>{@link org.xtext.example.mydsl.myDsl.impl.ForEachImpl#getEnsemble <em>Ensemble</em>}</li>
 *   <li>{@link org.xtext.example.mydsl.myDsl.impl.ForEachImpl#getCmdsFor <em>Cmds For</em>}</li>
 * </ul>
 * </p>
 *
 * @generated
 */
public class ForEachImpl extends MinimalEObjectImpl.Container implements ForEach
{
  /**
   * The cached value of the '{@link #getElem() <em>Elem</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getElem()
   * @generated
   * @ordered
   */
  protected Expression elem;

  /**
   * The cached value of the '{@link #getEnsemble() <em>Ensemble</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getEnsemble()
   * @generated
   * @ordered
   */
  protected Expression ensemble;

  /**
   * The cached value of the '{@link #getCmdsFor() <em>Cmds For</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getCmdsFor()
   * @generated
   * @ordered
   */
  protected Commandes cmdsFor;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected ForEachImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return MyDslPackage.Literals.FOR_EACH;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Expression getElem()
  {
    return elem;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetElem(Expression newElem, NotificationChain msgs)
  {
    Expression oldElem = elem;
    elem = newElem;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, MyDslPackage.FOR_EACH__ELEM, oldElem, newElem);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setElem(Expression newElem)
  {
    if (newElem != elem)
    {
      NotificationChain msgs = null;
      if (elem != null)
        msgs = ((InternalEObject)elem).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - MyDslPackage.FOR_EACH__ELEM, null, msgs);
      if (newElem != null)
        msgs = ((InternalEObject)newElem).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - MyDslPackage.FOR_EACH__ELEM, null, msgs);
      msgs = basicSetElem(newElem, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, MyDslPackage.FOR_EACH__ELEM, newElem, newElem));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Expression getEnsemble()
  {
    return ensemble;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetEnsemble(Expression newEnsemble, NotificationChain msgs)
  {
    Expression oldEnsemble = ensemble;
    ensemble = newEnsemble;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, MyDslPackage.FOR_EACH__ENSEMBLE, oldEnsemble, newEnsemble);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setEnsemble(Expression newEnsemble)
  {
    if (newEnsemble != ensemble)
    {
      NotificationChain msgs = null;
      if (ensemble != null)
        msgs = ((InternalEObject)ensemble).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - MyDslPackage.FOR_EACH__ENSEMBLE, null, msgs);
      if (newEnsemble != null)
        msgs = ((InternalEObject)newEnsemble).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - MyDslPackage.FOR_EACH__ENSEMBLE, null, msgs);
      msgs = basicSetEnsemble(newEnsemble, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, MyDslPackage.FOR_EACH__ENSEMBLE, newEnsemble, newEnsemble));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Commandes getCmdsFor()
  {
    return cmdsFor;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetCmdsFor(Commandes newCmdsFor, NotificationChain msgs)
  {
    Commandes oldCmdsFor = cmdsFor;
    cmdsFor = newCmdsFor;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, MyDslPackage.FOR_EACH__CMDS_FOR, oldCmdsFor, newCmdsFor);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setCmdsFor(Commandes newCmdsFor)
  {
    if (newCmdsFor != cmdsFor)
    {
      NotificationChain msgs = null;
      if (cmdsFor != null)
        msgs = ((InternalEObject)cmdsFor).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - MyDslPackage.FOR_EACH__CMDS_FOR, null, msgs);
      if (newCmdsFor != null)
        msgs = ((InternalEObject)newCmdsFor).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - MyDslPackage.FOR_EACH__CMDS_FOR, null, msgs);
      msgs = basicSetCmdsFor(newCmdsFor, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, MyDslPackage.FOR_EACH__CMDS_FOR, newCmdsFor, newCmdsFor));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case MyDslPackage.FOR_EACH__ELEM:
        return basicSetElem(null, msgs);
      case MyDslPackage.FOR_EACH__ENSEMBLE:
        return basicSetEnsemble(null, msgs);
      case MyDslPackage.FOR_EACH__CMDS_FOR:
        return basicSetCmdsFor(null, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case MyDslPackage.FOR_EACH__ELEM:
        return getElem();
      case MyDslPackage.FOR_EACH__ENSEMBLE:
        return getEnsemble();
      case MyDslPackage.FOR_EACH__CMDS_FOR:
        return getCmdsFor();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case MyDslPackage.FOR_EACH__ELEM:
        setElem((Expression)newValue);
        return;
      case MyDslPackage.FOR_EACH__ENSEMBLE:
        setEnsemble((Expression)newValue);
        return;
      case MyDslPackage.FOR_EACH__CMDS_FOR:
        setCmdsFor((Commandes)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case MyDslPackage.FOR_EACH__ELEM:
        setElem((Expression)null);
        return;
      case MyDslPackage.FOR_EACH__ENSEMBLE:
        setEnsemble((Expression)null);
        return;
      case MyDslPackage.FOR_EACH__CMDS_FOR:
        setCmdsFor((Commandes)null);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case MyDslPackage.FOR_EACH__ELEM:
        return elem != null;
      case MyDslPackage.FOR_EACH__ENSEMBLE:
        return ensemble != null;
      case MyDslPackage.FOR_EACH__CMDS_FOR:
        return cmdsFor != null;
    }
    return super.eIsSet(featureID);
  }

} //ForEachImpl
