/**
 * generated by Xtext 2.10.0
 */
package org.xtext.example.mydsl.myDsl.impl;

import java.util.Collection;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import org.eclipse.emf.ecore.util.EObjectContainmentEList;
import org.eclipse.emf.ecore.util.InternalEList;

import org.xtext.example.mydsl.myDsl.Commande;
import org.xtext.example.mydsl.myDsl.Commandes;
import org.xtext.example.mydsl.myDsl.MyDslPackage;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Commandes</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * <ul>
 *   <li>{@link org.xtext.example.mydsl.myDsl.impl.CommandesImpl#getCommande <em>Commande</em>}</li>
 *   <li>{@link org.xtext.example.mydsl.myDsl.impl.CommandesImpl#getCommandes <em>Commandes</em>}</li>
 * </ul>
 * </p>
 *
 * @generated
 */
public class CommandesImpl extends MinimalEObjectImpl.Container implements Commandes
{
  /**
   * The cached value of the '{@link #getCommande() <em>Commande</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getCommande()
   * @generated
   * @ordered
   */
  protected Commande commande;

  /**
   * The cached value of the '{@link #getCommandes() <em>Commandes</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getCommandes()
   * @generated
   * @ordered
   */
  protected EList<Commande> commandes;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected CommandesImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return MyDslPackage.Literals.COMMANDES;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Commande getCommande()
  {
    return commande;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetCommande(Commande newCommande, NotificationChain msgs)
  {
    Commande oldCommande = commande;
    commande = newCommande;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, MyDslPackage.COMMANDES__COMMANDE, oldCommande, newCommande);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setCommande(Commande newCommande)
  {
    if (newCommande != commande)
    {
      NotificationChain msgs = null;
      if (commande != null)
        msgs = ((InternalEObject)commande).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - MyDslPackage.COMMANDES__COMMANDE, null, msgs);
      if (newCommande != null)
        msgs = ((InternalEObject)newCommande).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - MyDslPackage.COMMANDES__COMMANDE, null, msgs);
      msgs = basicSetCommande(newCommande, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, MyDslPackage.COMMANDES__COMMANDE, newCommande, newCommande));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EList<Commande> getCommandes()
  {
    if (commandes == null)
    {
      commandes = new EObjectContainmentEList<Commande>(Commande.class, this, MyDslPackage.COMMANDES__COMMANDES);
    }
    return commandes;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case MyDslPackage.COMMANDES__COMMANDE:
        return basicSetCommande(null, msgs);
      case MyDslPackage.COMMANDES__COMMANDES:
        return ((InternalEList<?>)getCommandes()).basicRemove(otherEnd, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case MyDslPackage.COMMANDES__COMMANDE:
        return getCommande();
      case MyDslPackage.COMMANDES__COMMANDES:
        return getCommandes();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @SuppressWarnings("unchecked")
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case MyDslPackage.COMMANDES__COMMANDE:
        setCommande((Commande)newValue);
        return;
      case MyDslPackage.COMMANDES__COMMANDES:
        getCommandes().clear();
        getCommandes().addAll((Collection<? extends Commande>)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case MyDslPackage.COMMANDES__COMMANDE:
        setCommande((Commande)null);
        return;
      case MyDslPackage.COMMANDES__COMMANDES:
        getCommandes().clear();
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case MyDslPackage.COMMANDES__COMMANDE:
        return commande != null;
      case MyDslPackage.COMMANDES__COMMANDES:
        return commandes != null && !commandes.isEmpty();
    }
    return super.eIsSet(featureID);
  }

} //CommandesImpl
