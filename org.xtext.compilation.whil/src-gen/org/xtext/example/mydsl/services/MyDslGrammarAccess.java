/*
 * generated by Xtext 2.10.0
 */
package org.xtext.example.mydsl.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractGrammarElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class MyDslGrammarAccess extends AbstractGrammarElementFinder {
	
	public class ProgramElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.Program");
		private final Assignment cFonctionsAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cFonctionsFonctionParserRuleCall_0 = (RuleCall)cFonctionsAssignment.eContents().get(0);
		
		//Program:
		//	fonctions+=Fonction*;
		@Override public ParserRule getRule() { return rule; }
		
		//fonctions+=Fonction*
		public Assignment getFonctionsAssignment() { return cFonctionsAssignment; }
		
		//Fonction
		public RuleCall getFonctionsFonctionParserRuleCall_0() { return cFonctionsFonctionParserRuleCall_0; }
	}
	public class FonctionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.Fonction");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cFunctionKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNomAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNomSYMBOLTerminalRuleCall_1_0 = (RuleCall)cNomAssignment_1.eContents().get(0);
		private final Keyword cColonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cReadKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cInAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cInInputParserRuleCall_4_0 = (RuleCall)cInAssignment_4.eContents().get(0);
		private final Keyword cPercentSignKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cCommandesAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cCommandesCommandesParserRuleCall_6_0 = (RuleCall)cCommandesAssignment_6.eContents().get(0);
		private final Keyword cPercentSignKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final Keyword cWriteKeyword_8 = (Keyword)cGroup.eContents().get(8);
		private final Assignment cOutAssignment_9 = (Assignment)cGroup.eContents().get(9);
		private final RuleCall cOutOutputParserRuleCall_9_0 = (RuleCall)cOutAssignment_9.eContents().get(0);
		
		//Fonction:
		//	'function' nom=SYMBOL ':'
		//	'read' in=Input
		//	'%'
		//	commandes=Commandes
		//	'%'
		//	'write' out=Output;
		@Override public ParserRule getRule() { return rule; }
		
		//'function' nom=SYMBOL ':' 'read' in=Input '%' commandes=Commandes '%' 'write' out=Output
		public Group getGroup() { return cGroup; }
		
		//'function'
		public Keyword getFunctionKeyword_0() { return cFunctionKeyword_0; }
		
		//nom=SYMBOL
		public Assignment getNomAssignment_1() { return cNomAssignment_1; }
		
		//SYMBOL
		public RuleCall getNomSYMBOLTerminalRuleCall_1_0() { return cNomSYMBOLTerminalRuleCall_1_0; }
		
		//':'
		public Keyword getColonKeyword_2() { return cColonKeyword_2; }
		
		//'read'
		public Keyword getReadKeyword_3() { return cReadKeyword_3; }
		
		//in=Input
		public Assignment getInAssignment_4() { return cInAssignment_4; }
		
		//Input
		public RuleCall getInInputParserRuleCall_4_0() { return cInInputParserRuleCall_4_0; }
		
		//'%'
		public Keyword getPercentSignKeyword_5() { return cPercentSignKeyword_5; }
		
		//commandes=Commandes
		public Assignment getCommandesAssignment_6() { return cCommandesAssignment_6; }
		
		//Commandes
		public RuleCall getCommandesCommandesParserRuleCall_6_0() { return cCommandesCommandesParserRuleCall_6_0; }
		
		//'%'
		public Keyword getPercentSignKeyword_7() { return cPercentSignKeyword_7; }
		
		//'write'
		public Keyword getWriteKeyword_8() { return cWriteKeyword_8; }
		
		//out=Output
		public Assignment getOutAssignment_9() { return cOutAssignment_9; }
		
		//Output
		public RuleCall getOutOutputParserRuleCall_9_0() { return cOutOutputParserRuleCall_9_0; }
	}
	public class CommandesElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.Commandes");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cCommandeAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cCommandeCommandeParserRuleCall_0_0 = (RuleCall)cCommandeAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final RuleCall cSEPTerminalRuleCall_1_0 = (RuleCall)cGroup_1.eContents().get(0);
		private final Assignment cCommandesAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cCommandesCommandeParserRuleCall_1_1_0 = (RuleCall)cCommandesAssignment_1_1.eContents().get(0);
		
		//// COMANDEs
		//Commandes:
		//	commande=Commande (SEP commandes+=Commande)*;
		@Override public ParserRule getRule() { return rule; }
		
		//commande=Commande (SEP commandes+=Commande)*
		public Group getGroup() { return cGroup; }
		
		//commande=Commande
		public Assignment getCommandeAssignment_0() { return cCommandeAssignment_0; }
		
		//Commande
		public RuleCall getCommandeCommandeParserRuleCall_0_0() { return cCommandeCommandeParserRuleCall_0_0; }
		
		//(SEP commandes+=Commande)*
		public Group getGroup_1() { return cGroup_1; }
		
		//SEP
		public RuleCall getSEPTerminalRuleCall_1_0() { return cSEPTerminalRuleCall_1_0; }
		
		//commandes+=Commande
		public Assignment getCommandesAssignment_1_1() { return cCommandesAssignment_1_1; }
		
		//Commande
		public RuleCall getCommandesCommandeParserRuleCall_1_1_0() { return cCommandesCommandeParserRuleCall_1_1_0; }
	}
	public class CommandeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.Commande");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cCommandeAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cCommandeNopParserRuleCall_0_0 = (RuleCall)cCommandeAssignment_0.eContents().get(0);
		private final Assignment cCommandeAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cCommandeAffectationParserRuleCall_1_0 = (RuleCall)cCommandeAssignment_1.eContents().get(0);
		private final Assignment cCommandeAssignment_2 = (Assignment)cAlternatives.eContents().get(2);
		private final RuleCall cCommandeIfParserRuleCall_2_0 = (RuleCall)cCommandeAssignment_2.eContents().get(0);
		private final Assignment cCommandeAssignment_3 = (Assignment)cAlternatives.eContents().get(3);
		private final RuleCall cCommandeWhileParserRuleCall_3_0 = (RuleCall)cCommandeAssignment_3.eContents().get(0);
		private final Assignment cCommandeAssignment_4 = (Assignment)cAlternatives.eContents().get(4);
		private final RuleCall cCommandeForParserRuleCall_4_0 = (RuleCall)cCommandeAssignment_4.eContents().get(0);
		private final Assignment cCommandeAssignment_5 = (Assignment)cAlternatives.eContents().get(5);
		private final RuleCall cCommandeForEachParserRuleCall_5_0 = (RuleCall)cCommandeAssignment_5.eContents().get(0);
		
		//Commande:
		//	commande=Nop
		//	| commande=Affectation
		//	| commande=If
		//	| commande=While
		//	| commande=For
		//	| commande=ForEach;
		@Override public ParserRule getRule() { return rule; }
		
		//commande=Nop | commande=Affectation | commande=If | commande=While | commande=For | commande=ForEach
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//commande=Nop
		public Assignment getCommandeAssignment_0() { return cCommandeAssignment_0; }
		
		//Nop
		public RuleCall getCommandeNopParserRuleCall_0_0() { return cCommandeNopParserRuleCall_0_0; }
		
		//commande=Affectation
		public Assignment getCommandeAssignment_1() { return cCommandeAssignment_1; }
		
		//Affectation
		public RuleCall getCommandeAffectationParserRuleCall_1_0() { return cCommandeAffectationParserRuleCall_1_0; }
		
		//commande=If
		public Assignment getCommandeAssignment_2() { return cCommandeAssignment_2; }
		
		//If
		public RuleCall getCommandeIfParserRuleCall_2_0() { return cCommandeIfParserRuleCall_2_0; }
		
		//commande=While
		public Assignment getCommandeAssignment_3() { return cCommandeAssignment_3; }
		
		//While
		public RuleCall getCommandeWhileParserRuleCall_3_0() { return cCommandeWhileParserRuleCall_3_0; }
		
		//commande=For
		public Assignment getCommandeAssignment_4() { return cCommandeAssignment_4; }
		
		//For
		public RuleCall getCommandeForParserRuleCall_4_0() { return cCommandeForParserRuleCall_4_0; }
		
		//commande=ForEach
		public Assignment getCommandeAssignment_5() { return cCommandeAssignment_5; }
		
		//ForEach
		public RuleCall getCommandeForEachParserRuleCall_5_0() { return cCommandeForEachParserRuleCall_5_0; }
	}
	public class AffectationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.Affectation");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cGroup.eContents().get(0);
		private final Assignment cVariableAssignment_0_0 = (Assignment)cGroup_0.eContents().get(0);
		private final RuleCall cVariableVariableParserRuleCall_0_0_0 = (RuleCall)cVariableAssignment_0_0.eContents().get(0);
		private final Group cGroup_0_1 = (Group)cGroup_0.eContents().get(1);
		private final Keyword cCommaKeyword_0_1_0 = (Keyword)cGroup_0_1.eContents().get(0);
		private final Assignment cVariableAssignment_0_1_1 = (Assignment)cGroup_0_1.eContents().get(1);
		private final RuleCall cVariableVariableParserRuleCall_0_1_1_0 = (RuleCall)cVariableAssignment_0_1_1.eContents().get(0);
		private final Keyword cColonEqualsSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Assignment cElmAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final RuleCall cElmExpressionParserRuleCall_2_0_0 = (RuleCall)cElmAssignment_2_0.eContents().get(0);
		private final Group cGroup_2_1 = (Group)cGroup_2.eContents().get(1);
		private final Keyword cCommaKeyword_2_1_0 = (Keyword)cGroup_2_1.eContents().get(0);
		private final Assignment cElmAssignment_2_1_1 = (Assignment)cGroup_2_1.eContents().get(1);
		private final RuleCall cElmExpressionParserRuleCall_2_1_1_0 = (RuleCall)cElmAssignment_2_1_1.eContents().get(0);
		
		//Affectation:
		//	(variable+=Variable (',' variable+=Variable)*) ':=' (elm+=Expression (',' elm+=Expression)*);
		@Override public ParserRule getRule() { return rule; }
		
		//(variable+=Variable (',' variable+=Variable)*) ':=' (elm+=Expression (',' elm+=Expression)*)
		public Group getGroup() { return cGroup; }
		
		//(variable+=Variable (',' variable+=Variable)*)
		public Group getGroup_0() { return cGroup_0; }
		
		//variable+=Variable
		public Assignment getVariableAssignment_0_0() { return cVariableAssignment_0_0; }
		
		//Variable
		public RuleCall getVariableVariableParserRuleCall_0_0_0() { return cVariableVariableParserRuleCall_0_0_0; }
		
		//(',' variable+=Variable)*
		public Group getGroup_0_1() { return cGroup_0_1; }
		
		//','
		public Keyword getCommaKeyword_0_1_0() { return cCommaKeyword_0_1_0; }
		
		//variable+=Variable
		public Assignment getVariableAssignment_0_1_1() { return cVariableAssignment_0_1_1; }
		
		//Variable
		public RuleCall getVariableVariableParserRuleCall_0_1_1_0() { return cVariableVariableParserRuleCall_0_1_1_0; }
		
		//':='
		public Keyword getColonEqualsSignKeyword_1() { return cColonEqualsSignKeyword_1; }
		
		//(elm+=Expression (',' elm+=Expression)*)
		public Group getGroup_2() { return cGroup_2; }
		
		//elm+=Expression
		public Assignment getElmAssignment_2_0() { return cElmAssignment_2_0; }
		
		//Expression
		public RuleCall getElmExpressionParserRuleCall_2_0_0() { return cElmExpressionParserRuleCall_2_0_0; }
		
		//(',' elm+=Expression)*
		public Group getGroup_2_1() { return cGroup_2_1; }
		
		//','
		public Keyword getCommaKeyword_2_1_0() { return cCommaKeyword_2_1_0; }
		
		//elm+=Expression
		public Assignment getElmAssignment_2_1_1() { return cElmAssignment_2_1_1; }
		
		//Expression
		public RuleCall getElmExpressionParserRuleCall_2_1_1_0() { return cElmExpressionParserRuleCall_2_1_1_0; }
	}
	public class IfElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.If");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cIfKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cCondAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cCondExpressionParserRuleCall_1_0 = (RuleCall)cCondAssignment_1.eContents().get(0);
		private final Keyword cThenKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cCmdsIfAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cCmdsIfCommandesParserRuleCall_3_0 = (RuleCall)cCmdsIfAssignment_3.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cElseKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cCmdsElseAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cCmdsElseCommandesParserRuleCall_4_1_0 = (RuleCall)cCmdsElseAssignment_4_1.eContents().get(0);
		private final Keyword cFiKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//If:
		//	'if' cond=Expression 'then' cmdsIf=Commandes ('else' cmdsElse=Commandes)? 'fi';
		@Override public ParserRule getRule() { return rule; }
		
		//'if' cond=Expression 'then' cmdsIf=Commandes ('else' cmdsElse=Commandes)? 'fi'
		public Group getGroup() { return cGroup; }
		
		//'if'
		public Keyword getIfKeyword_0() { return cIfKeyword_0; }
		
		//cond=Expression
		public Assignment getCondAssignment_1() { return cCondAssignment_1; }
		
		//Expression
		public RuleCall getCondExpressionParserRuleCall_1_0() { return cCondExpressionParserRuleCall_1_0; }
		
		//'then'
		public Keyword getThenKeyword_2() { return cThenKeyword_2; }
		
		//cmdsIf=Commandes
		public Assignment getCmdsIfAssignment_3() { return cCmdsIfAssignment_3; }
		
		//Commandes
		public RuleCall getCmdsIfCommandesParserRuleCall_3_0() { return cCmdsIfCommandesParserRuleCall_3_0; }
		
		//('else' cmdsElse=Commandes)?
		public Group getGroup_4() { return cGroup_4; }
		
		//'else'
		public Keyword getElseKeyword_4_0() { return cElseKeyword_4_0; }
		
		//cmdsElse=Commandes
		public Assignment getCmdsElseAssignment_4_1() { return cCmdsElseAssignment_4_1; }
		
		//Commandes
		public RuleCall getCmdsElseCommandesParserRuleCall_4_1_0() { return cCmdsElseCommandesParserRuleCall_4_1_0; }
		
		//'fi'
		public Keyword getFiKeyword_5() { return cFiKeyword_5; }
	}
	public class WhileElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.While");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cWhileKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cCondAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cCondExpressionParserRuleCall_1_0 = (RuleCall)cCondAssignment_1.eContents().get(0);
		private final Keyword cDoKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cCmdsWhAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cCmdsWhCommandesParserRuleCall_3_0 = (RuleCall)cCmdsWhAssignment_3.eContents().get(0);
		private final Keyword cOdKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//While:
		//	'while' cond=Expression 'do' cmdsWh=Commandes 'od';
		@Override public ParserRule getRule() { return rule; }
		
		//'while' cond=Expression 'do' cmdsWh=Commandes 'od'
		public Group getGroup() { return cGroup; }
		
		//'while'
		public Keyword getWhileKeyword_0() { return cWhileKeyword_0; }
		
		//cond=Expression
		public Assignment getCondAssignment_1() { return cCondAssignment_1; }
		
		//Expression
		public RuleCall getCondExpressionParserRuleCall_1_0() { return cCondExpressionParserRuleCall_1_0; }
		
		//'do'
		public Keyword getDoKeyword_2() { return cDoKeyword_2; }
		
		//cmdsWh=Commandes
		public Assignment getCmdsWhAssignment_3() { return cCmdsWhAssignment_3; }
		
		//Commandes
		public RuleCall getCmdsWhCommandesParserRuleCall_3_0() { return cCmdsWhCommandesParserRuleCall_3_0; }
		
		//'od'
		public Keyword getOdKeyword_4() { return cOdKeyword_4; }
	}
	public class ForElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.For");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cForKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cCondAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cCondExpressionParserRuleCall_1_0 = (RuleCall)cCondAssignment_1.eContents().get(0);
		private final Keyword cDoKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cCmdsForAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cCmdsForCommandesParserRuleCall_3_0 = (RuleCall)cCmdsForAssignment_3.eContents().get(0);
		private final Keyword cOdKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//For:
		//	'for' cond=Expression 'do' cmdsFor=Commandes 'od';
		@Override public ParserRule getRule() { return rule; }
		
		//'for' cond=Expression 'do' cmdsFor=Commandes 'od'
		public Group getGroup() { return cGroup; }
		
		//'for'
		public Keyword getForKeyword_0() { return cForKeyword_0; }
		
		//cond=Expression
		public Assignment getCondAssignment_1() { return cCondAssignment_1; }
		
		//Expression
		public RuleCall getCondExpressionParserRuleCall_1_0() { return cCondExpressionParserRuleCall_1_0; }
		
		//'do'
		public Keyword getDoKeyword_2() { return cDoKeyword_2; }
		
		//cmdsFor=Commandes
		public Assignment getCmdsForAssignment_3() { return cCmdsForAssignment_3; }
		
		//Commandes
		public RuleCall getCmdsForCommandesParserRuleCall_3_0() { return cCmdsForCommandesParserRuleCall_3_0; }
		
		//'od'
		public Keyword getOdKeyword_4() { return cOdKeyword_4; }
	}
	public class ForEachElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.ForEach");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cForeachKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cElemAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cElemExpressionParserRuleCall_1_0 = (RuleCall)cElemAssignment_1.eContents().get(0);
		private final Keyword cInKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cEnsembleAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cEnsembleExpressionParserRuleCall_3_0 = (RuleCall)cEnsembleAssignment_3.eContents().get(0);
		private final Keyword cDoKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cCmdsForAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cCmdsForCommandesParserRuleCall_5_0 = (RuleCall)cCmdsForAssignment_5.eContents().get(0);
		private final Keyword cOdKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//ForEach:
		//	'foreach' elem=Expression 'in' ensemble=Expression 'do' cmdsFor=Commandes 'od';
		@Override public ParserRule getRule() { return rule; }
		
		//'foreach' elem=Expression 'in' ensemble=Expression 'do' cmdsFor=Commandes 'od'
		public Group getGroup() { return cGroup; }
		
		//'foreach'
		public Keyword getForeachKeyword_0() { return cForeachKeyword_0; }
		
		//elem=Expression
		public Assignment getElemAssignment_1() { return cElemAssignment_1; }
		
		//Expression
		public RuleCall getElemExpressionParserRuleCall_1_0() { return cElemExpressionParserRuleCall_1_0; }
		
		//'in'
		public Keyword getInKeyword_2() { return cInKeyword_2; }
		
		//ensemble=Expression
		public Assignment getEnsembleAssignment_3() { return cEnsembleAssignment_3; }
		
		//Expression
		public RuleCall getEnsembleExpressionParserRuleCall_3_0() { return cEnsembleExpressionParserRuleCall_3_0; }
		
		//'do'
		public Keyword getDoKeyword_4() { return cDoKeyword_4; }
		
		//cmdsFor=Commandes
		public Assignment getCmdsForAssignment_5() { return cCmdsForAssignment_5; }
		
		//Commandes
		public RuleCall getCmdsForCommandesParserRuleCall_5_0() { return cCmdsForCommandesParserRuleCall_5_0; }
		
		//'od'
		public Keyword getOdKeyword_6() { return cOdKeyword_6; }
	}
	public class NopElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.Nop");
		private final Assignment cNopAssignment = (Assignment)rule.eContents().get(1);
		private final Keyword cNopNopKeyword_0 = (Keyword)cNopAssignment.eContents().get(0);
		
		//Nop:
		//	nop='nop';
		@Override public ParserRule getRule() { return rule; }
		
		//nop='nop'
		public Assignment getNopAssignment() { return cNopAssignment; }
		
		//'nop'
		public Keyword getNopNopKeyword_0() { return cNopNopKeyword_0; }
	}
	public class ExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.Expression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cCondAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cCondConditionParserRuleCall_0_0 = (RuleCall)cCondAssignment_0.eContents().get(0);
		private final Assignment cExprsAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cExprsExprSimpleParserRuleCall_1_0 = (RuleCall)cExprsAssignment_1.eContents().get(0);
		
		//// EXPR
		//Expression:
		//	=> cond=Condition | exprs=ExprSimple;
		@Override public ParserRule getRule() { return rule; }
		
		//=> cond=Condition | exprs=ExprSimple
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//=> cond=Condition
		public Assignment getCondAssignment_0() { return cCondAssignment_0; }
		
		//Condition
		public RuleCall getCondConditionParserRuleCall_0_0() { return cCondConditionParserRuleCall_0_0; }
		
		//exprs=ExprSimple
		public Assignment getExprsAssignment_1() { return cExprsAssignment_1; }
		
		//ExprSimple
		public RuleCall getExprsExprSimpleParserRuleCall_1_0() { return cExprsExprSimpleParserRuleCall_1_0; }
	}
	public class ExprSimpleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.ExprSimple");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cNilAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cNilNillParserRuleCall_0_0 = (RuleCall)cNilAssignment_0.eContents().get(0);
		private final Assignment cVariableAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cVariableVariableParserRuleCall_1_0 = (RuleCall)cVariableAssignment_1.eContents().get(0);
		private final Assignment cAbinAssignment_2 = (Assignment)cAlternatives.eContents().get(2);
		private final RuleCall cAbinABinParserRuleCall_2_0 = (RuleCall)cAbinAssignment_2.eContents().get(0);
		private final Assignment cSymbAssignment_3 = (Assignment)cAlternatives.eContents().get(3);
		private final RuleCall cSymbSYMBOLTerminalRuleCall_3_0 = (RuleCall)cSymbAssignment_3.eContents().get(0);
		private final Assignment cAccsuccAssignment_4 = (Assignment)cAlternatives.eContents().get(4);
		private final RuleCall cAccsuccAccSuccParserRuleCall_4_0 = (RuleCall)cAccsuccAssignment_4.eContents().get(0);
		private final Assignment cElemSimpleAssignment_5 = (Assignment)cAlternatives.eContents().get(5);
		private final RuleCall cElemSimpleElemSimpleParserRuleCall_5_0 = (RuleCall)cElemSimpleAssignment_5.eContents().get(0);
		
		//ExprSimple:
		//	nil=Nill
		//	| variable=Variable
		//	| abin=ABin
		//	| symb=SYMBOL
		//	| accsucc=AccSucc
		//	| elemSimple=ElemSimple;
		@Override public ParserRule getRule() { return rule; }
		
		//nil=Nill | variable=Variable | abin=ABin | symb=SYMBOL | accsucc=AccSucc | elemSimple=ElemSimple
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//nil=Nill
		public Assignment getNilAssignment_0() { return cNilAssignment_0; }
		
		//Nill
		public RuleCall getNilNillParserRuleCall_0_0() { return cNilNillParserRuleCall_0_0; }
		
		//variable=Variable
		public Assignment getVariableAssignment_1() { return cVariableAssignment_1; }
		
		//Variable
		public RuleCall getVariableVariableParserRuleCall_1_0() { return cVariableVariableParserRuleCall_1_0; }
		
		//abin=ABin
		public Assignment getAbinAssignment_2() { return cAbinAssignment_2; }
		
		//ABin
		public RuleCall getAbinABinParserRuleCall_2_0() { return cAbinABinParserRuleCall_2_0; }
		
		//symb=SYMBOL
		public Assignment getSymbAssignment_3() { return cSymbAssignment_3; }
		
		//SYMBOL
		public RuleCall getSymbSYMBOLTerminalRuleCall_3_0() { return cSymbSYMBOLTerminalRuleCall_3_0; }
		
		//accsucc=AccSucc
		public Assignment getAccsuccAssignment_4() { return cAccsuccAssignment_4; }
		
		//AccSucc
		public RuleCall getAccsuccAccSuccParserRuleCall_4_0() { return cAccsuccAccSuccParserRuleCall_4_0; }
		
		//elemSimple=ElemSimple
		public Assignment getElemSimpleAssignment_5() { return cElemSimpleAssignment_5; }
		
		//ElemSimple
		public RuleCall getElemSimpleElemSimpleParserRuleCall_5_0() { return cElemSimpleElemSimpleParserRuleCall_5_0; }
	}
	public class VariableElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.Variable");
		private final Assignment cVariableAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cVariableMAJTerminalRuleCall_0 = (RuleCall)cVariableAssignment.eContents().get(0);
		
		//Variable:
		//	variable=MAJ;
		@Override public ParserRule getRule() { return rule; }
		
		//variable=MAJ
		public Assignment getVariableAssignment() { return cVariableAssignment; }
		
		//MAJ
		public RuleCall getVariableMAJTerminalRuleCall_0() { return cVariableMAJTerminalRuleCall_0; }
	}
	public class LexprElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.Lexpr");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cE1Assignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cE1ExprSimpleParserRuleCall_0_0 = (RuleCall)cE1Assignment_0.eContents().get(0);
		private final Assignment cLexprAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cLexprLexprParserRuleCall_1_0 = (RuleCall)cLexprAssignment_1.eContents().get(0);
		
		//Lexpr:
		//	e1=ExprSimple lexpr=Lexpr?;
		@Override public ParserRule getRule() { return rule; }
		
		//e1=ExprSimple lexpr=Lexpr?
		public Group getGroup() { return cGroup; }
		
		//e1=ExprSimple
		public Assignment getE1Assignment_0() { return cE1Assignment_0; }
		
		//ExprSimple
		public RuleCall getE1ExprSimpleParserRuleCall_0_0() { return cE1ExprSimpleParserRuleCall_0_0; }
		
		//lexpr=Lexpr?
		public Assignment getLexprAssignment_1() { return cLexprAssignment_1; }
		
		//Lexpr
		public RuleCall getLexprLexprParserRuleCall_1_0() { return cLexprLexprParserRuleCall_1_0; }
	}
	public class ElemSimpleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.ElemSimple");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cSymbAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cSymbSYMBOLTerminalRuleCall_1_0 = (RuleCall)cSymbAssignment_1.eContents().get(0);
		private final Assignment cLexprAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cLexprLexprParserRuleCall_2_0 = (RuleCall)cLexprAssignment_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//ElemSimple:
		//	'(' symb=SYMBOL lexpr=Lexpr ')';
		@Override public ParserRule getRule() { return rule; }
		
		//'(' symb=SYMBOL lexpr=Lexpr ')'
		public Group getGroup() { return cGroup; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_0() { return cLeftParenthesisKeyword_0; }
		
		//symb=SYMBOL
		public Assignment getSymbAssignment_1() { return cSymbAssignment_1; }
		
		//SYMBOL
		public RuleCall getSymbSYMBOLTerminalRuleCall_1_0() { return cSymbSYMBOLTerminalRuleCall_1_0; }
		
		//lexpr=Lexpr
		public Assignment getLexprAssignment_2() { return cLexprAssignment_2; }
		
		//Lexpr
		public RuleCall getLexprLexprParserRuleCall_2_0() { return cLexprLexprParserRuleCall_2_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
	}
	public class ConditionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.Condition");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final RuleCall cNotParserRuleCall_0_0 = (RuleCall)cGroup_0.eContents().get(0);
		private final Assignment cExprAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cExprExpressionParserRuleCall_0_1_0 = (RuleCall)cExprAssignment_0_1.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Assignment cE1Assignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cE1ExprSimpleParserRuleCall_1_0_0 = (RuleCall)cE1Assignment_1_0.eContents().get(0);
		private final Assignment cCompAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cCompCOMPARATEURParserRuleCall_1_1_0 = (RuleCall)cCompAssignment_1_1.eContents().get(0);
		private final Assignment cE2Assignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cE2ExpressionParserRuleCall_1_2_0 = (RuleCall)cE2Assignment_1_2.eContents().get(0);
		
		//Condition:
		//	Not expr=Expression | e1=ExprSimple comp=COMPARATEUR e2=Expression;
		@Override public ParserRule getRule() { return rule; }
		
		//Not expr=Expression | e1=ExprSimple comp=COMPARATEUR e2=Expression
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Not expr=Expression
		public Group getGroup_0() { return cGroup_0; }
		
		//Not
		public RuleCall getNotParserRuleCall_0_0() { return cNotParserRuleCall_0_0; }
		
		//expr=Expression
		public Assignment getExprAssignment_0_1() { return cExprAssignment_0_1; }
		
		//Expression
		public RuleCall getExprExpressionParserRuleCall_0_1_0() { return cExprExpressionParserRuleCall_0_1_0; }
		
		//e1=ExprSimple comp=COMPARATEUR e2=Expression
		public Group getGroup_1() { return cGroup_1; }
		
		//e1=ExprSimple
		public Assignment getE1Assignment_1_0() { return cE1Assignment_1_0; }
		
		//ExprSimple
		public RuleCall getE1ExprSimpleParserRuleCall_1_0_0() { return cE1ExprSimpleParserRuleCall_1_0_0; }
		
		//comp=COMPARATEUR
		public Assignment getCompAssignment_1_1() { return cCompAssignment_1_1; }
		
		//COMPARATEUR
		public RuleCall getCompCOMPARATEURParserRuleCall_1_1_0() { return cCompCOMPARATEURParserRuleCall_1_1_0; }
		
		//e2=Expression
		public Assignment getE2Assignment_1_2() { return cE2Assignment_1_2; }
		
		//Expression
		public RuleCall getE2ExpressionParserRuleCall_1_2_0() { return cE2ExpressionParserRuleCall_1_2_0; }
	}
	public class ABinElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.ABin");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cOpAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cOpOpConstructeurParserRuleCall_1_0 = (RuleCall)cOpAssignment_1.eContents().get(0);
		private final Assignment cE1Assignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cE1ExpressionParserRuleCall_2_0 = (RuleCall)cE1Assignment_2.eContents().get(0);
		private final Assignment cE2Assignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cE2ExpressionParserRuleCall_3_0 = (RuleCall)cE2Assignment_3.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//ABin:
		//	'(' op=OpConstructeur e1=Expression e2=Expression ')';
		@Override public ParserRule getRule() { return rule; }
		
		//'(' op=OpConstructeur e1=Expression e2=Expression ')'
		public Group getGroup() { return cGroup; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_0() { return cLeftParenthesisKeyword_0; }
		
		//op=OpConstructeur
		public Assignment getOpAssignment_1() { return cOpAssignment_1; }
		
		//OpConstructeur
		public RuleCall getOpOpConstructeurParserRuleCall_1_0() { return cOpOpConstructeurParserRuleCall_1_0; }
		
		//e1=Expression
		public Assignment getE1Assignment_2() { return cE1Assignment_2; }
		
		//Expression
		public RuleCall getE1ExpressionParserRuleCall_2_0() { return cE1ExpressionParserRuleCall_2_0; }
		
		//e2=Expression
		public Assignment getE2Assignment_3() { return cE2Assignment_3; }
		
		//Expression
		public RuleCall getE2ExpressionParserRuleCall_3_0() { return cE2ExpressionParserRuleCall_3_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
	}
	public class AccSuccElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.AccSucc");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cOpAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cOpOpAccSuccParserRuleCall_1_0 = (RuleCall)cOpAssignment_1.eContents().get(0);
		private final Assignment cExprAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cExprExprSimpleParserRuleCall_2_0 = (RuleCall)cExprAssignment_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//AccSucc:
		//	'(' op=OpAccSucc expr=ExprSimple ')';
		@Override public ParserRule getRule() { return rule; }
		
		//'(' op=OpAccSucc expr=ExprSimple ')'
		public Group getGroup() { return cGroup; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_0() { return cLeftParenthesisKeyword_0; }
		
		//op=OpAccSucc
		public Assignment getOpAssignment_1() { return cOpAssignment_1; }
		
		//OpAccSucc
		public RuleCall getOpOpAccSuccParserRuleCall_1_0() { return cOpOpAccSuccParserRuleCall_1_0; }
		
		//expr=ExprSimple
		public Assignment getExprAssignment_2() { return cExprAssignment_2; }
		
		//ExprSimple
		public RuleCall getExprExprSimpleParserRuleCall_2_0() { return cExprExprSimpleParserRuleCall_2_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
	}
	public class OutputElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.Output");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cOutAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cOutMAJTerminalRuleCall_0_0 = (RuleCall)cOutAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cCommaKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cOutAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cOutMAJTerminalRuleCall_1_1_0 = (RuleCall)cOutAssignment_1_1.eContents().get(0);
		
		//// IN OUT
		//Output:
		//	out+=MAJ (',' out+=MAJ)*;
		@Override public ParserRule getRule() { return rule; }
		
		//out+=MAJ (',' out+=MAJ)*
		public Group getGroup() { return cGroup; }
		
		//out+=MAJ
		public Assignment getOutAssignment_0() { return cOutAssignment_0; }
		
		//MAJ
		public RuleCall getOutMAJTerminalRuleCall_0_0() { return cOutMAJTerminalRuleCall_0_0; }
		
		//(',' out+=MAJ)*
		public Group getGroup_1() { return cGroup_1; }
		
		//','
		public Keyword getCommaKeyword_1_0() { return cCommaKeyword_1_0; }
		
		//out+=MAJ
		public Assignment getOutAssignment_1_1() { return cOutAssignment_1_1; }
		
		//MAJ
		public RuleCall getOutMAJTerminalRuleCall_1_1_0() { return cOutMAJTerminalRuleCall_1_1_0; }
	}
	public class InputElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.Input");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cInAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cInMAJTerminalRuleCall_0_0 = (RuleCall)cInAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cCommaKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cInAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cInMAJTerminalRuleCall_1_1_0 = (RuleCall)cInAssignment_1_1.eContents().get(0);
		
		//Input:
		//	in+=MAJ (',' in+=MAJ)*;
		@Override public ParserRule getRule() { return rule; }
		
		//in+=MAJ (',' in+=MAJ)*
		public Group getGroup() { return cGroup; }
		
		//in+=MAJ
		public Assignment getInAssignment_0() { return cInAssignment_0; }
		
		//MAJ
		public RuleCall getInMAJTerminalRuleCall_0_0() { return cInMAJTerminalRuleCall_0_0; }
		
		//(',' in+=MAJ)*
		public Group getGroup_1() { return cGroup_1; }
		
		//','
		public Keyword getCommaKeyword_1_0() { return cCommaKeyword_1_0; }
		
		//in+=MAJ
		public Assignment getInAssignment_1_1() { return cInAssignment_1_1; }
		
		//MAJ
		public RuleCall getInMAJTerminalRuleCall_1_1_0() { return cInMAJTerminalRuleCall_1_1_0; }
	}
	public class NillElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.Nill");
		private final Assignment cNilAssignment = (Assignment)rule.eContents().get(1);
		private final Keyword cNilNilKeyword_0 = (Keyword)cNilAssignment.eContents().get(0);
		
		//// TERMINAUX
		//Nill:
		//	nil='nil';
		@Override public ParserRule getRule() { return rule; }
		
		//nil='nil'
		public Assignment getNilAssignment() { return cNilAssignment; }
		
		//'nil'
		public Keyword getNilNilKeyword_0() { return cNilNilKeyword_0; }
	}
	public class OpAccSuccElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.OpAccSucc");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cOpAccSuccAction_0 = (Action)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Assignment cOpAssignment_1_0 = (Assignment)cAlternatives_1.eContents().get(0);
		private final Keyword cOpHdKeyword_1_0_0 = (Keyword)cOpAssignment_1_0.eContents().get(0);
		private final Assignment cOpAssignment_1_1 = (Assignment)cAlternatives_1.eContents().get(1);
		private final Keyword cOpTlKeyword_1_1_0 = (Keyword)cOpAssignment_1_1.eContents().get(0);
		
		//OpAccSucc:
		//	{OpAccSucc} (op='hd' | op='tl');
		@Override public ParserRule getRule() { return rule; }
		
		//{OpAccSucc} (op='hd' | op='tl')
		public Group getGroup() { return cGroup; }
		
		//{OpAccSucc}
		public Action getOpAccSuccAction_0() { return cOpAccSuccAction_0; }
		
		//(op='hd' | op='tl')
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//op='hd'
		public Assignment getOpAssignment_1_0() { return cOpAssignment_1_0; }
		
		//'hd'
		public Keyword getOpHdKeyword_1_0_0() { return cOpHdKeyword_1_0_0; }
		
		//op='tl'
		public Assignment getOpAssignment_1_1() { return cOpAssignment_1_1; }
		
		//'tl'
		public Keyword getOpTlKeyword_1_1_0() { return cOpTlKeyword_1_1_0; }
	}
	public class NotElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.Not");
		private final Assignment cNotAssignment = (Assignment)rule.eContents().get(1);
		private final Keyword cNotNotKeyword_0 = (Keyword)cNotAssignment.eContents().get(0);
		
		//Not:
		//	not='not';
		@Override public ParserRule getRule() { return rule; }
		
		//not='not'
		public Assignment getNotAssignment() { return cNotAssignment; }
		
		//'not'
		public Keyword getNotNotKeyword_0() { return cNotNotKeyword_0; }
	}
	public class OpConstructeurElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.OpConstructeur");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cOpConstructeurAction_0 = (Action)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Assignment cOpAssignment_1_0 = (Assignment)cAlternatives_1.eContents().get(0);
		private final Keyword cOpConsKeyword_1_0_0 = (Keyword)cOpAssignment_1_0.eContents().get(0);
		private final Assignment cOpAssignment_1_1 = (Assignment)cAlternatives_1.eContents().get(1);
		private final Keyword cOpListKeyword_1_1_0 = (Keyword)cOpAssignment_1_1.eContents().get(0);
		
		//OpConstructeur:
		//	{OpConstructeur} (op='cons' | op='list');
		@Override public ParserRule getRule() { return rule; }
		
		//{OpConstructeur} (op='cons' | op='list')
		public Group getGroup() { return cGroup; }
		
		//{OpConstructeur}
		public Action getOpConstructeurAction_0() { return cOpConstructeurAction_0; }
		
		//(op='cons' | op='list')
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//op='cons'
		public Assignment getOpAssignment_1_0() { return cOpAssignment_1_0; }
		
		//'cons'
		public Keyword getOpConsKeyword_1_0_0() { return cOpConsKeyword_1_0_0; }
		
		//op='list'
		public Assignment getOpAssignment_1_1() { return cOpAssignment_1_1; }
		
		//'list'
		public Keyword getOpListKeyword_1_1_0() { return cOpListKeyword_1_1_0; }
	}
	public class COMPARATEURElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.COMPARATEUR");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cComparateurAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final Keyword cComparateurEqualsSignQuestionMarkKeyword_0_0 = (Keyword)cComparateurAssignment_0.eContents().get(0);
		private final Assignment cComparateurAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final Keyword cComparateurOrKeyword_1_0 = (Keyword)cComparateurAssignment_1.eContents().get(0);
		private final Assignment cComparateurAssignment_2 = (Assignment)cAlternatives.eContents().get(2);
		private final Keyword cComparateurAndKeyword_2_0 = (Keyword)cComparateurAssignment_2.eContents().get(0);
		
		//COMPARATEUR:
		//	comparateur='=?'
		//	| comparateur='or'
		//	| comparateur='and';
		@Override public ParserRule getRule() { return rule; }
		
		//comparateur='=?' | comparateur='or' | comparateur='and'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//comparateur='=?'
		public Assignment getComparateurAssignment_0() { return cComparateurAssignment_0; }
		
		//'=?'
		public Keyword getComparateurEqualsSignQuestionMarkKeyword_0_0() { return cComparateurEqualsSignQuestionMarkKeyword_0_0; }
		
		//comparateur='or'
		public Assignment getComparateurAssignment_1() { return cComparateurAssignment_1; }
		
		//'or'
		public Keyword getComparateurOrKeyword_1_0() { return cComparateurOrKeyword_1_0; }
		
		//comparateur='and'
		public Assignment getComparateurAssignment_2() { return cComparateurAssignment_2; }
		
		//'and'
		public Keyword getComparateurAndKeyword_2_0() { return cComparateurAndKeyword_2_0; }
	}
	
	
	private final ProgramElements pProgram;
	private final FonctionElements pFonction;
	private final CommandesElements pCommandes;
	private final CommandeElements pCommande;
	private final AffectationElements pAffectation;
	private final IfElements pIf;
	private final WhileElements pWhile;
	private final ForElements pFor;
	private final ForEachElements pForEach;
	private final NopElements pNop;
	private final ExpressionElements pExpression;
	private final ExprSimpleElements pExprSimple;
	private final VariableElements pVariable;
	private final LexprElements pLexpr;
	private final ElemSimpleElements pElemSimple;
	private final ConditionElements pCondition;
	private final ABinElements pABin;
	private final AccSuccElements pAccSucc;
	private final OutputElements pOutput;
	private final InputElements pInput;
	private final NillElements pNill;
	private final OpAccSuccElements pOpAccSucc;
	private final NotElements pNot;
	private final OpConstructeurElements pOpConstructeur;
	private final COMPARATEURElements pCOMPARATEUR;
	private final TerminalRule tSEP;
	private final TerminalRule tMAJ;
	private final TerminalRule tSYMBOL;
	private final TerminalRule tESPACE;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public MyDslGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pProgram = new ProgramElements();
		this.pFonction = new FonctionElements();
		this.pCommandes = new CommandesElements();
		this.pCommande = new CommandeElements();
		this.pAffectation = new AffectationElements();
		this.pIf = new IfElements();
		this.pWhile = new WhileElements();
		this.pFor = new ForElements();
		this.pForEach = new ForEachElements();
		this.pNop = new NopElements();
		this.pExpression = new ExpressionElements();
		this.pExprSimple = new ExprSimpleElements();
		this.pVariable = new VariableElements();
		this.pLexpr = new LexprElements();
		this.pElemSimple = new ElemSimpleElements();
		this.pCondition = new ConditionElements();
		this.pABin = new ABinElements();
		this.pAccSucc = new AccSuccElements();
		this.pOutput = new OutputElements();
		this.pInput = new InputElements();
		this.pNill = new NillElements();
		this.pOpAccSucc = new OpAccSuccElements();
		this.pNot = new NotElements();
		this.pOpConstructeur = new OpConstructeurElements();
		this.pCOMPARATEUR = new COMPARATEURElements();
		this.tSEP = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.SEP");
		this.tMAJ = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.MAJ");
		this.tSYMBOL = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.SYMBOL");
		this.tESPACE = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.ESPACE");
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.xtext.example.mydsl.MyDsl".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Program:
	//	fonctions+=Fonction*;
	public ProgramElements getProgramAccess() {
		return pProgram;
	}
	
	public ParserRule getProgramRule() {
		return getProgramAccess().getRule();
	}
	
	//Fonction:
	//	'function' nom=SYMBOL ':'
	//	'read' in=Input
	//	'%'
	//	commandes=Commandes
	//	'%'
	//	'write' out=Output;
	public FonctionElements getFonctionAccess() {
		return pFonction;
	}
	
	public ParserRule getFonctionRule() {
		return getFonctionAccess().getRule();
	}
	
	//// COMANDEs
	//Commandes:
	//	commande=Commande (SEP commandes+=Commande)*;
	public CommandesElements getCommandesAccess() {
		return pCommandes;
	}
	
	public ParserRule getCommandesRule() {
		return getCommandesAccess().getRule();
	}
	
	//Commande:
	//	commande=Nop
	//	| commande=Affectation
	//	| commande=If
	//	| commande=While
	//	| commande=For
	//	| commande=ForEach;
	public CommandeElements getCommandeAccess() {
		return pCommande;
	}
	
	public ParserRule getCommandeRule() {
		return getCommandeAccess().getRule();
	}
	
	//Affectation:
	//	(variable+=Variable (',' variable+=Variable)*) ':=' (elm+=Expression (',' elm+=Expression)*);
	public AffectationElements getAffectationAccess() {
		return pAffectation;
	}
	
	public ParserRule getAffectationRule() {
		return getAffectationAccess().getRule();
	}
	
	//If:
	//	'if' cond=Expression 'then' cmdsIf=Commandes ('else' cmdsElse=Commandes)? 'fi';
	public IfElements getIfAccess() {
		return pIf;
	}
	
	public ParserRule getIfRule() {
		return getIfAccess().getRule();
	}
	
	//While:
	//	'while' cond=Expression 'do' cmdsWh=Commandes 'od';
	public WhileElements getWhileAccess() {
		return pWhile;
	}
	
	public ParserRule getWhileRule() {
		return getWhileAccess().getRule();
	}
	
	//For:
	//	'for' cond=Expression 'do' cmdsFor=Commandes 'od';
	public ForElements getForAccess() {
		return pFor;
	}
	
	public ParserRule getForRule() {
		return getForAccess().getRule();
	}
	
	//ForEach:
	//	'foreach' elem=Expression 'in' ensemble=Expression 'do' cmdsFor=Commandes 'od';
	public ForEachElements getForEachAccess() {
		return pForEach;
	}
	
	public ParserRule getForEachRule() {
		return getForEachAccess().getRule();
	}
	
	//Nop:
	//	nop='nop';
	public NopElements getNopAccess() {
		return pNop;
	}
	
	public ParserRule getNopRule() {
		return getNopAccess().getRule();
	}
	
	//// EXPR
	//Expression:
	//	=> cond=Condition | exprs=ExprSimple;
	public ExpressionElements getExpressionAccess() {
		return pExpression;
	}
	
	public ParserRule getExpressionRule() {
		return getExpressionAccess().getRule();
	}
	
	//ExprSimple:
	//	nil=Nill
	//	| variable=Variable
	//	| abin=ABin
	//	| symb=SYMBOL
	//	| accsucc=AccSucc
	//	| elemSimple=ElemSimple;
	public ExprSimpleElements getExprSimpleAccess() {
		return pExprSimple;
	}
	
	public ParserRule getExprSimpleRule() {
		return getExprSimpleAccess().getRule();
	}
	
	//Variable:
	//	variable=MAJ;
	public VariableElements getVariableAccess() {
		return pVariable;
	}
	
	public ParserRule getVariableRule() {
		return getVariableAccess().getRule();
	}
	
	//Lexpr:
	//	e1=ExprSimple lexpr=Lexpr?;
	public LexprElements getLexprAccess() {
		return pLexpr;
	}
	
	public ParserRule getLexprRule() {
		return getLexprAccess().getRule();
	}
	
	//ElemSimple:
	//	'(' symb=SYMBOL lexpr=Lexpr ')';
	public ElemSimpleElements getElemSimpleAccess() {
		return pElemSimple;
	}
	
	public ParserRule getElemSimpleRule() {
		return getElemSimpleAccess().getRule();
	}
	
	//Condition:
	//	Not expr=Expression | e1=ExprSimple comp=COMPARATEUR e2=Expression;
	public ConditionElements getConditionAccess() {
		return pCondition;
	}
	
	public ParserRule getConditionRule() {
		return getConditionAccess().getRule();
	}
	
	//ABin:
	//	'(' op=OpConstructeur e1=Expression e2=Expression ')';
	public ABinElements getABinAccess() {
		return pABin;
	}
	
	public ParserRule getABinRule() {
		return getABinAccess().getRule();
	}
	
	//AccSucc:
	//	'(' op=OpAccSucc expr=ExprSimple ')';
	public AccSuccElements getAccSuccAccess() {
		return pAccSucc;
	}
	
	public ParserRule getAccSuccRule() {
		return getAccSuccAccess().getRule();
	}
	
	//// IN OUT
	//Output:
	//	out+=MAJ (',' out+=MAJ)*;
	public OutputElements getOutputAccess() {
		return pOutput;
	}
	
	public ParserRule getOutputRule() {
		return getOutputAccess().getRule();
	}
	
	//Input:
	//	in+=MAJ (',' in+=MAJ)*;
	public InputElements getInputAccess() {
		return pInput;
	}
	
	public ParserRule getInputRule() {
		return getInputAccess().getRule();
	}
	
	//// TERMINAUX
	//Nill:
	//	nil='nil';
	public NillElements getNillAccess() {
		return pNill;
	}
	
	public ParserRule getNillRule() {
		return getNillAccess().getRule();
	}
	
	//OpAccSucc:
	//	{OpAccSucc} (op='hd' | op='tl');
	public OpAccSuccElements getOpAccSuccAccess() {
		return pOpAccSucc;
	}
	
	public ParserRule getOpAccSuccRule() {
		return getOpAccSuccAccess().getRule();
	}
	
	//Not:
	//	not='not';
	public NotElements getNotAccess() {
		return pNot;
	}
	
	public ParserRule getNotRule() {
		return getNotAccess().getRule();
	}
	
	//OpConstructeur:
	//	{OpConstructeur} (op='cons' | op='list');
	public OpConstructeurElements getOpConstructeurAccess() {
		return pOpConstructeur;
	}
	
	public ParserRule getOpConstructeurRule() {
		return getOpConstructeurAccess().getRule();
	}
	
	//COMPARATEUR:
	//	comparateur='=?'
	//	| comparateur='or'
	//	| comparateur='and';
	public COMPARATEURElements getCOMPARATEURAccess() {
		return pCOMPARATEUR;
	}
	
	public ParserRule getCOMPARATEURRule() {
		return getCOMPARATEURAccess().getRule();
	}
	
	//terminal SEP:
	//	';';
	public TerminalRule getSEPRule() {
		return tSEP;
	}
	
	//terminal MAJ:
	//	'A'..'Z' ('A'..'Z' | 'a'..'z')*;
	public TerminalRule getMAJRule() {
		return tMAJ;
	}
	
	//terminal SYMBOL:
	//	'a'..'z' ('A'..'Z' | 'a'..'z' | '0'..'9')* ((('-' | '+' | '.' | '/' | '_' | '&') | "->") ('0'..'9' | 'a'..'z' |
	//	'A'..'Z')+)* ('?' | '!')?;
	public TerminalRule getSYMBOLRule() {
		return tSYMBOL;
	}
	
	//terminal ESPACE:
	//	'\n';
	public TerminalRule getESPACERule() {
		return tESPACE;
	}
	
	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt:
	//	'0'..'9'+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"' | "'" ('\\' . | !('\\' | "'"))* "'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT:
	//	'/ *'->'* /';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
