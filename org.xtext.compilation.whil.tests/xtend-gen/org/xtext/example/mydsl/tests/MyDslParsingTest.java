/**
 * generated by Xtext 2.10.0
 */
package org.xtext.example.mydsl.tests;

import com.google.inject.Inject;
import java.util.List;
import org.eclipse.xtend2.lib.StringConcatenation;
import org.eclipse.xtext.junit4.InjectWith;
import org.eclipse.xtext.junit4.XtextRunner;
import org.eclipse.xtext.junit4.util.ParseHelper;
import org.eclipse.xtext.junit4.validation.ValidationTestHelper;
import org.eclipse.xtext.validation.Issue;
import org.eclipse.xtext.xbase.lib.Exceptions;
import org.eclipse.xtext.xbase.lib.Extension;
import org.junit.Assert;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.xtext.example.mydsl.myDsl.Program;
import org.xtext.example.mydsl.tests.MyDslInjectorProvider;

@RunWith(XtextRunner.class)
@InjectWith(MyDslInjectorProvider.class)
@SuppressWarnings("all")
public class MyDslParsingTest {
  @Inject
  @Extension
  private ParseHelper<Program> _parseHelper;
  
  @Inject
  @Extension
  private ValidationTestHelper _validationTestHelper;
  
  @Test
  public void structureSimple() {
    try {
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("function p :");
      _builder.newLine();
      _builder.append("read X");
      _builder.newLine();
      _builder.append("%");
      _builder.newLine();
      _builder.append("nop");
      _builder.newLine();
      _builder.append("% ");
      _builder.newLine();
      _builder.append("write X");
      _builder.newLine();
      Program _parse = this._parseHelper.parse(_builder);
      this._validationTestHelper.assertNoErrors(_parse);
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }
  
  public void programSimple() {
    try {
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("function p :");
      _builder.newLine();
      _builder.append("read X");
      _builder.newLine();
      _builder.append("%");
      _builder.newLine();
      _builder.append("nop");
      _builder.newLine();
      _builder.append("% ");
      _builder.newLine();
      _builder.append("write X");
      _builder.newLine();
      _builder.append("function d :");
      _builder.newLine();
      _builder.append("read X");
      _builder.newLine();
      _builder.append("%");
      _builder.newLine();
      _builder.append("nop");
      _builder.newLine();
      _builder.append("% ");
      _builder.newLine();
      _builder.append("write X");
      _builder.newLine();
      Program _parse = this._parseHelper.parse(_builder);
      this._validationTestHelper.assertNoErrors(_parse);
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }
  
  @Test
  public void simplePlusieursRW() {
    try {
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("function p :");
      _builder.newLine();
      _builder.append("read X, Y");
      _builder.newLine();
      _builder.append("% ");
      _builder.newLine();
      _builder.append("nop;");
      _builder.newLine();
      _builder.append("nop");
      _builder.newLine();
      _builder.append("% ");
      _builder.newLine();
      _builder.append("write X, Z");
      _builder.newLine();
      Program _parse = this._parseHelper.parse(_builder);
      this._validationTestHelper.assertNoErrors(_parse);
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }
  
  @Test
  public void affectationSimple() {
    try {
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("function p :");
      _builder.newLine();
      _builder.append("read X, Y, Z");
      _builder.newLine();
      _builder.append("% ");
      _builder.newLine();
      _builder.append(" ");
      _builder.append("X:= a;");
      _builder.newLine();
      _builder.append("nop");
      _builder.newLine();
      _builder.append("% ");
      _builder.newLine();
      _builder.append("write X, Z");
      _builder.newLine();
      Program _parse = this._parseHelper.parse(_builder);
      this._validationTestHelper.assertNoErrors(_parse);
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }
  
  @Test
  public void affectationMultiple() {
    try {
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("function p :");
      _builder.newLine();
      _builder.append("read Ba, Cer");
      _builder.newLine();
      _builder.append("% ");
      _builder.newLine();
      _builder.append("X, Y := (cons a b) , (hd a);");
      _builder.newLine();
      _builder.append("nop");
      _builder.newLine();
      _builder.append("% ");
      _builder.newLine();
      _builder.append("write AA, ZiA, Aa");
      _builder.newLine();
      Program _parse = this._parseHelper.parse(_builder);
      this._validationTestHelper.assertNoErrors(_parse);
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }
  
  @Test
  public void ifSimple() {
    try {
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("function p :");
      _builder.newLine();
      _builder.append("read B, C");
      _builder.newLine();
      _builder.append("% ");
      _builder.newLine();
      _builder.append("if a ?=b then ");
      _builder.newLine();
      _builder.append("nop");
      _builder.newLine();
      _builder.append("fi");
      _builder.newLine();
      _builder.append("% ");
      _builder.newLine();
      _builder.append("write A, Z");
      _builder.newLine();
      Program _parse = this._parseHelper.parse(_builder);
      this._validationTestHelper.assertNoErrors(_parse);
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }
  
  @Test
  public void whileSimple() {
    try {
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("function p :");
      _builder.newLine();
      _builder.append("read B, C");
      _builder.newLine();
      _builder.append("% ");
      _builder.newLine();
      _builder.append("while not a do ");
      _builder.newLine();
      _builder.append("nop");
      _builder.newLine();
      _builder.append("od");
      _builder.newLine();
      _builder.append("% ");
      _builder.newLine();
      _builder.append("write A, Z");
      _builder.newLine();
      Program _parse = this._parseHelper.parse(_builder);
      this._validationTestHelper.assertNoErrors(_parse);
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }
  
  @Test
  public void forSimple() {
    try {
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("function p :");
      _builder.newLine();
      _builder.append("read B, C");
      _builder.newLine();
      _builder.append("% ");
      _builder.newLine();
      _builder.append("for a do ");
      _builder.newLine();
      _builder.append("nop");
      _builder.newLine();
      _builder.append("od");
      _builder.newLine();
      _builder.append("% ");
      _builder.newLine();
      _builder.append("write A, Z");
      _builder.newLine();
      Program _parse = this._parseHelper.parse(_builder);
      this._validationTestHelper.assertNoErrors(_parse);
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }
  
  @Test
  public void foreachSimple() {
    try {
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("function p :");
      _builder.newLine();
      _builder.append("read B, C");
      _builder.newLine();
      _builder.append("% ");
      _builder.newLine();
      _builder.append("foreach a in nil do ");
      _builder.newLine();
      _builder.append("nop");
      _builder.newLine();
      _builder.append("od");
      _builder.newLine();
      _builder.append("% ");
      _builder.newLine();
      _builder.append("write A, Z");
      _builder.newLine();
      Program _parse = this._parseHelper.parse(_builder);
      this._validationTestHelper.assertNoErrors(_parse);
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }
  
  @Test
  public void whileComplexe() {
    try {
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("function p :");
      _builder.newLine();
      _builder.append("read B, C");
      _builder.newLine();
      _builder.append("% ");
      _builder.newLine();
      _builder.append("while a or b or (cons B a) do ");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("while a ?= (hd b) do");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("X, Y := (cons a b) , nil;");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("nop");
      _builder.newLine();
      _builder.append("od");
      _builder.newLine();
      _builder.append("od");
      _builder.newLine();
      _builder.append("% ");
      _builder.newLine();
      _builder.append("write A, Z");
      _builder.newLine();
      Program _parse = this._parseHelper.parse(_builder);
      this._validationTestHelper.assertNoErrors(_parse);
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }
  
  @Test
  public void forComplexe() {
    try {
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("function p :");
      _builder.newLine();
      _builder.append("read B, C");
      _builder.newLine();
      _builder.append("% ");
      _builder.newLine();
      _builder.append("for a or b or (cons B a) do ");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("for a ?= (hd b) do");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("X, Y := (cons a b) , (hd a);");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("nop");
      _builder.newLine();
      _builder.append("od");
      _builder.newLine();
      _builder.append("od");
      _builder.newLine();
      _builder.append("% ");
      _builder.newLine();
      _builder.append("write A, Z");
      _builder.newLine();
      Program _parse = this._parseHelper.parse(_builder);
      this._validationTestHelper.assertNoErrors(_parse);
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }
  
  @Test
  public void ifComplexe() {
    try {
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("function p :");
      _builder.newLine();
      _builder.append("read B, C");
      _builder.newLine();
      _builder.append("% ");
      _builder.newLine();
      _builder.append("if a and b or (cons B a) then");
      _builder.newLine();
      _builder.append("if a ?= (hd b) then");
      _builder.newLine();
      _builder.append("X, Y := (cons a b) , (hd a);");
      _builder.newLine();
      _builder.append("nop");
      _builder.newLine();
      _builder.append("fi");
      _builder.newLine();
      _builder.append("fi");
      _builder.newLine();
      _builder.append("% ");
      _builder.newLine();
      _builder.append("write A, Z");
      _builder.newLine();
      Program _parse = this._parseHelper.parse(_builder);
      this._validationTestHelper.assertNoErrors(_parse);
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }
  
  @Test
  public void functionComplexe() {
    try {
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("function p :");
      _builder.newLine();
      _builder.append("read B, C");
      _builder.newLine();
      _builder.append("% ");
      _builder.newLine();
      _builder.append("for a or b or (cons B a) do ");
      _builder.newLine();
      _builder.append("X := (cons a (cons B (hd C)));");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("while a ?= (hd b) do");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("if C then ");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("X, Y := (cons a b) , (hd a);");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("nop");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("fi");
      _builder.newLine();
      _builder.append("od");
      _builder.newLine();
      _builder.append("od");
      _builder.newLine();
      _builder.append("% ");
      _builder.newLine();
      _builder.append("write A, Z");
      _builder.newLine();
      Program _parse = this._parseHelper.parse(_builder);
      this._validationTestHelper.assertNoErrors(_parse);
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }
  
  @Test
  public void structureFalse() {
    try {
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("function p :");
      _builder.newLine();
      _builder.append("read z");
      _builder.newLine();
      _builder.append("%");
      _builder.newLine();
      _builder.append("nop");
      _builder.newLine();
      _builder.append("% ");
      _builder.newLine();
      _builder.append("write X");
      _builder.newLine();
      Program _parse = this._parseHelper.parse(_builder);
      List<Issue> _validate = this._validationTestHelper.validate(_parse);
      final boolean x = _validate.isEmpty();
      Assert.assertFalse("z minuscule", x);
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }
  
  @Test
  public void affectationFalse() {
    try {
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("function p :");
      _builder.newLine();
      _builder.append("read Z");
      _builder.newLine();
      _builder.append("%");
      _builder.newLine();
      _builder.append("X:= (cons a b), Z");
      _builder.newLine();
      _builder.append("% ");
      _builder.newLine();
      _builder.append("write X");
      _builder.newLine();
      Program _parse = this._parseHelper.parse(_builder);
      List<Issue> _validate = this._validationTestHelper.validate(_parse);
      final boolean x = _validate.isEmpty();
      Assert.assertFalse(x);
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }
  
  @Test
  public void pointVirguleManquant() {
    try {
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("function p :");
      _builder.newLine();
      _builder.append("read Z");
      _builder.newLine();
      _builder.append("%");
      _builder.newLine();
      _builder.append("X, Y:= (a b), (cons a nil)");
      _builder.newLine();
      _builder.append("nop");
      _builder.newLine();
      _builder.append("% ");
      _builder.newLine();
      _builder.append("write X");
      _builder.newLine();
      Program _parse = this._parseHelper.parse(_builder);
      List<Issue> _validate = this._validationTestHelper.validate(_parse);
      final boolean x = _validate.isEmpty();
      Assert.assertFalse(x);
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }
  
  @Test
  public void pourcentManquant() {
    try {
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("function p :");
      _builder.newLine();
      _builder.append("read Z");
      _builder.newLine();
      _builder.append("nop;");
      _builder.newLine();
      _builder.append("nop");
      _builder.newLine();
      _builder.append("% ");
      _builder.newLine();
      _builder.append("write X");
      _builder.newLine();
      Program _parse = this._parseHelper.parse(_builder);
      List<Issue> _validate = this._validationTestHelper.validate(_parse);
      final boolean x = _validate.isEmpty();
      Assert.assertFalse(x);
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }
  
  @Test
  public void deuxpointManquant() {
    try {
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("function p ");
      _builder.newLine();
      _builder.append("read Z");
      _builder.newLine();
      _builder.append("%");
      _builder.newLine();
      _builder.append("nop;");
      _builder.newLine();
      _builder.append("nop");
      _builder.newLine();
      _builder.append("% ");
      _builder.newLine();
      _builder.append("write X");
      _builder.newLine();
      Program _parse = this._parseHelper.parse(_builder);
      List<Issue> _validate = this._validationTestHelper.validate(_parse);
      final boolean x = _validate.isEmpty();
      Assert.assertFalse(x);
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }
  
  @Test
  public void fiManquant() {
    try {
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("function p :");
      _builder.newLine();
      _builder.append("read Z");
      _builder.newLine();
      _builder.append("%");
      _builder.newLine();
      _builder.append("if a then");
      _builder.newLine();
      _builder.append("nop");
      _builder.newLine();
      _builder.append("% ");
      _builder.newLine();
      _builder.append("write X");
      _builder.newLine();
      Program _parse = this._parseHelper.parse(_builder);
      List<Issue> _validate = this._validationTestHelper.validate(_parse);
      final boolean x = _validate.isEmpty();
      Assert.assertFalse(x);
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }
  
  @Test
  public void odManquant() {
    try {
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("function p :");
      _builder.newLine();
      _builder.append("read Z");
      _builder.newLine();
      _builder.append("%");
      _builder.newLine();
      _builder.append("while a do");
      _builder.newLine();
      _builder.append("nop");
      _builder.newLine();
      _builder.append("% ");
      _builder.newLine();
      _builder.append("write X");
      _builder.newLine();
      Program _parse = this._parseHelper.parse(_builder);
      List<Issue> _validate = this._validationTestHelper.validate(_parse);
      final boolean x = _validate.isEmpty();
      Assert.assertFalse(x);
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }
  
  @Test
  public void inputVirgule() {
    try {
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("function p :");
      _builder.newLine();
      _builder.append("read Z A");
      _builder.newLine();
      _builder.append("%");
      _builder.newLine();
      _builder.append("while a do");
      _builder.newLine();
      _builder.append("nop");
      _builder.newLine();
      _builder.append("% ");
      _builder.newLine();
      _builder.append("write X");
      _builder.newLine();
      Program _parse = this._parseHelper.parse(_builder);
      List<Issue> _validate = this._validationTestHelper.validate(_parse);
      final boolean x = _validate.isEmpty();
      Assert.assertFalse(x);
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }
  
  @Test
  public void inputMAJ() {
    try {
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("function p :");
      _builder.newLine();
      _builder.append("read a , B");
      _builder.newLine();
      _builder.append("%");
      _builder.newLine();
      _builder.append("while a do");
      _builder.newLine();
      _builder.append("nop");
      _builder.newLine();
      _builder.append("% ");
      _builder.newLine();
      _builder.append("write X");
      _builder.newLine();
      Program _parse = this._parseHelper.parse(_builder);
      List<Issue> _validate = this._validationTestHelper.validate(_parse);
      final boolean x = _validate.isEmpty();
      Assert.assertFalse(x);
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }
  
  @Test
  public void outputMAJ() {
    try {
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("function p :");
      _builder.newLine();
      _builder.append("read Aze , Bze");
      _builder.newLine();
      _builder.append("%");
      _builder.newLine();
      _builder.append("while a do");
      _builder.newLine();
      _builder.append("nop");
      _builder.newLine();
      _builder.append("% ");
      _builder.newLine();
      _builder.append("write a , Z");
      _builder.newLine();
      Program _parse = this._parseHelper.parse(_builder);
      List<Issue> _validate = this._validationTestHelper.validate(_parse);
      final boolean x = _validate.isEmpty();
      Assert.assertFalse(x);
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }
  
  @Test
  public void outputVirgule() {
    try {
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("function p :");
      _builder.newLine();
      _builder.append("read Z, A");
      _builder.newLine();
      _builder.append("%");
      _builder.newLine();
      _builder.append("while a do");
      _builder.newLine();
      _builder.append("nop");
      _builder.newLine();
      _builder.append("% ");
      _builder.newLine();
      _builder.append("write X A");
      _builder.newLine();
      Program _parse = this._parseHelper.parse(_builder);
      List<Issue> _validate = this._validationTestHelper.validate(_parse);
      final boolean x = _validate.isEmpty();
      Assert.assertFalse(x);
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }
  
  @Test
  public void ABinMaltype() {
    try {
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("function p :");
      _builder.newLine();
      _builder.append("read Z");
      _builder.newLine();
      _builder.append("%");
      _builder.newLine();
      _builder.append("X:= cons a b)");
      _builder.newLine();
      _builder.append("% ");
      _builder.newLine();
      _builder.append("write X");
      _builder.newLine();
      Program _parse = this._parseHelper.parse(_builder);
      List<Issue> _validate = this._validationTestHelper.validate(_parse);
      final boolean x = _validate.isEmpty();
      Assert.assertFalse(x);
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }
  
  @Test
  public void ABinMaltype2() {
    try {
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("function p :");
      _builder.newLine();
      _builder.append("read Z");
      _builder.newLine();
      _builder.append("%");
      _builder.newLine();
      _builder.append("X:= (cons a )");
      _builder.newLine();
      _builder.append("% ");
      _builder.newLine();
      _builder.append("write X");
      _builder.newLine();
      Program _parse = this._parseHelper.parse(_builder);
      List<Issue> _validate = this._validationTestHelper.validate(_parse);
      final boolean x = _validate.isEmpty();
      Assert.assertFalse(x);
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }
  
  @Test
  public void ABinMaltype3() {
    try {
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("function p :");
      _builder.newLine();
      _builder.append("read Z");
      _builder.newLine();
      _builder.append("%");
      _builder.newLine();
      _builder.append("X:= (hd  )");
      _builder.newLine();
      _builder.append("% ");
      _builder.newLine();
      _builder.append("write X");
      _builder.newLine();
      Program _parse = this._parseHelper.parse(_builder);
      List<Issue> _validate = this._validationTestHelper.validate(_parse);
      final boolean x = _validate.isEmpty();
      Assert.assertFalse(x);
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }
  
  @Test
  public void ABinMaltype4() {
    try {
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("function p :");
      _builder.newLine();
      _builder.append("read Z");
      _builder.newLine();
      _builder.append("%");
      _builder.newLine();
      _builder.append("X:= (tl  )");
      _builder.newLine();
      _builder.append("% ");
      _builder.newLine();
      _builder.append("write X");
      _builder.newLine();
      Program _parse = this._parseHelper.parse(_builder);
      List<Issue> _validate = this._validationTestHelper.validate(_parse);
      final boolean x = _validate.isEmpty();
      Assert.assertFalse(x);
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }
  
  @Test
  public void condMissing() {
    try {
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("function p :");
      _builder.newLine();
      _builder.append("read Z");
      _builder.newLine();
      _builder.append("%");
      _builder.newLine();
      _builder.append("if a b then");
      _builder.newLine();
      _builder.append("nop");
      _builder.newLine();
      _builder.append("fi");
      _builder.newLine();
      _builder.append("% ");
      _builder.newLine();
      _builder.append("write X");
      _builder.newLine();
      Program _parse = this._parseHelper.parse(_builder);
      List<Issue> _validate = this._validationTestHelper.validate(_parse);
      final boolean x = _validate.isEmpty();
      Assert.assertFalse(x);
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }
}
