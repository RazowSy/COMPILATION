/*
 * generated by Xtext 2.10.0
 */
grammar InternalMyDsl;

options {
	superClass=AbstractInternalContentAssistParser;
	backtrack=true;
}

@lexer::header {
package org.xtext.example.mydsl.ide.contentassist.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.Lexer;
}

@parser::header {
package org.xtext.example.mydsl.ide.contentassist.antlr.internal;

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.DFA;
import org.xtext.example.mydsl.services.MyDslGrammarAccess;

}
@parser::members {
	private MyDslGrammarAccess grammarAccess;

	public void setGrammarAccess(MyDslGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}

	@Override
	protected Grammar getGrammar() {
		return grammarAccess.getGrammar();
	}

	@Override
	protected String getValueForTokenName(String tokenName) {
		return tokenName;
	}
}

// Entry rule entryRuleProgram
entryRuleProgram
:
{ before(grammarAccess.getProgramRule()); }
	 ruleProgram
{ after(grammarAccess.getProgramRule()); } 
	 EOF 
;

// Rule Program
ruleProgram 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getProgramAccess().getFonctionsAssignment()); }
		(rule__Program__FonctionsAssignment)*
		{ after(grammarAccess.getProgramAccess().getFonctionsAssignment()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleFonction
entryRuleFonction
:
{ before(grammarAccess.getFonctionRule()); }
	 ruleFonction
{ after(grammarAccess.getFonctionRule()); } 
	 EOF 
;

// Rule Fonction
ruleFonction 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getFonctionAccess().getGroup()); }
		(rule__Fonction__Group__0)
		{ after(grammarAccess.getFonctionAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleCommandes
entryRuleCommandes
:
{ before(grammarAccess.getCommandesRule()); }
	 ruleCommandes
{ after(grammarAccess.getCommandesRule()); } 
	 EOF 
;

// Rule Commandes
ruleCommandes 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getCommandesAccess().getGroup()); }
		(rule__Commandes__Group__0)
		{ after(grammarAccess.getCommandesAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleCommande
entryRuleCommande
:
{ before(grammarAccess.getCommandeRule()); }
	 ruleCommande
{ after(grammarAccess.getCommandeRule()); } 
	 EOF 
;

// Rule Commande
ruleCommande 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getCommandeAccess().getAlternatives()); }
		(rule__Commande__Alternatives)
		{ after(grammarAccess.getCommandeAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleAffectation
entryRuleAffectation
:
{ before(grammarAccess.getAffectationRule()); }
	 ruleAffectation
{ after(grammarAccess.getAffectationRule()); } 
	 EOF 
;

// Rule Affectation
ruleAffectation 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getAffectationAccess().getGroup()); }
		(rule__Affectation__Group__0)
		{ after(grammarAccess.getAffectationAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleIf
entryRuleIf
:
{ before(grammarAccess.getIfRule()); }
	 ruleIf
{ after(grammarAccess.getIfRule()); } 
	 EOF 
;

// Rule If
ruleIf 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getIfAccess().getGroup()); }
		(rule__If__Group__0)
		{ after(grammarAccess.getIfAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleWhile
entryRuleWhile
:
{ before(grammarAccess.getWhileRule()); }
	 ruleWhile
{ after(grammarAccess.getWhileRule()); } 
	 EOF 
;

// Rule While
ruleWhile 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getWhileAccess().getGroup()); }
		(rule__While__Group__0)
		{ after(grammarAccess.getWhileAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleFor
entryRuleFor
:
{ before(grammarAccess.getForRule()); }
	 ruleFor
{ after(grammarAccess.getForRule()); } 
	 EOF 
;

// Rule For
ruleFor 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getForAccess().getGroup()); }
		(rule__For__Group__0)
		{ after(grammarAccess.getForAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleForEach
entryRuleForEach
:
{ before(grammarAccess.getForEachRule()); }
	 ruleForEach
{ after(grammarAccess.getForEachRule()); } 
	 EOF 
;

// Rule ForEach
ruleForEach 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getForEachAccess().getGroup()); }
		(rule__ForEach__Group__0)
		{ after(grammarAccess.getForEachAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleNop
entryRuleNop
:
{ before(grammarAccess.getNopRule()); }
	 ruleNop
{ after(grammarAccess.getNopRule()); } 
	 EOF 
;

// Rule Nop
ruleNop 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getNopAccess().getNopAssignment()); }
		(rule__Nop__NopAssignment)
		{ after(grammarAccess.getNopAccess().getNopAssignment()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleExpression
entryRuleExpression
:
{ before(grammarAccess.getExpressionRule()); }
	 ruleExpression
{ after(grammarAccess.getExpressionRule()); } 
	 EOF 
;

// Rule Expression
ruleExpression 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getExpressionAccess().getAlternatives()); }
		(rule__Expression__Alternatives)
		{ after(grammarAccess.getExpressionAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleExprSimple
entryRuleExprSimple
:
{ before(grammarAccess.getExprSimpleRule()); }
	 ruleExprSimple
{ after(grammarAccess.getExprSimpleRule()); } 
	 EOF 
;

// Rule ExprSimple
ruleExprSimple 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getExprSimpleAccess().getAlternatives()); }
		(rule__ExprSimple__Alternatives)
		{ after(grammarAccess.getExprSimpleAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleVariable
entryRuleVariable
:
{ before(grammarAccess.getVariableRule()); }
	 ruleVariable
{ after(grammarAccess.getVariableRule()); } 
	 EOF 
;

// Rule Variable
ruleVariable 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getVariableAccess().getVariableAssignment()); }
		(rule__Variable__VariableAssignment)
		{ after(grammarAccess.getVariableAccess().getVariableAssignment()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleLexpr
entryRuleLexpr
:
{ before(grammarAccess.getLexprRule()); }
	 ruleLexpr
{ after(grammarAccess.getLexprRule()); } 
	 EOF 
;

// Rule Lexpr
ruleLexpr 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getLexprAccess().getGroup()); }
		(rule__Lexpr__Group__0)
		{ after(grammarAccess.getLexprAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleElemSimple
entryRuleElemSimple
:
{ before(grammarAccess.getElemSimpleRule()); }
	 ruleElemSimple
{ after(grammarAccess.getElemSimpleRule()); } 
	 EOF 
;

// Rule ElemSimple
ruleElemSimple 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getElemSimpleAccess().getGroup()); }
		(rule__ElemSimple__Group__0)
		{ after(grammarAccess.getElemSimpleAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleCondition
entryRuleCondition
:
{ before(grammarAccess.getConditionRule()); }
	 ruleCondition
{ after(grammarAccess.getConditionRule()); } 
	 EOF 
;

// Rule Condition
ruleCondition 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getConditionAccess().getAlternatives()); }
		(rule__Condition__Alternatives)
		{ after(grammarAccess.getConditionAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleABin
entryRuleABin
:
{ before(grammarAccess.getABinRule()); }
	 ruleABin
{ after(grammarAccess.getABinRule()); } 
	 EOF 
;

// Rule ABin
ruleABin 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getABinAccess().getGroup()); }
		(rule__ABin__Group__0)
		{ after(grammarAccess.getABinAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleAccSucc
entryRuleAccSucc
:
{ before(grammarAccess.getAccSuccRule()); }
	 ruleAccSucc
{ after(grammarAccess.getAccSuccRule()); } 
	 EOF 
;

// Rule AccSucc
ruleAccSucc 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getAccSuccAccess().getGroup()); }
		(rule__AccSucc__Group__0)
		{ after(grammarAccess.getAccSuccAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleOutput
entryRuleOutput
:
{ before(grammarAccess.getOutputRule()); }
	 ruleOutput
{ after(grammarAccess.getOutputRule()); } 
	 EOF 
;

// Rule Output
ruleOutput 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getOutputAccess().getGroup()); }
		(rule__Output__Group__0)
		{ after(grammarAccess.getOutputAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleInput
entryRuleInput
:
{ before(grammarAccess.getInputRule()); }
	 ruleInput
{ after(grammarAccess.getInputRule()); } 
	 EOF 
;

// Rule Input
ruleInput 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getInputAccess().getGroup()); }
		(rule__Input__Group__0)
		{ after(grammarAccess.getInputAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleNill
entryRuleNill
:
{ before(grammarAccess.getNillRule()); }
	 ruleNill
{ after(grammarAccess.getNillRule()); } 
	 EOF 
;

// Rule Nill
ruleNill 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getNillAccess().getNilAssignment()); }
		(rule__Nill__NilAssignment)
		{ after(grammarAccess.getNillAccess().getNilAssignment()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleOpAccSucc
entryRuleOpAccSucc
:
{ before(grammarAccess.getOpAccSuccRule()); }
	 ruleOpAccSucc
{ after(grammarAccess.getOpAccSuccRule()); } 
	 EOF 
;

// Rule OpAccSucc
ruleOpAccSucc 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getOpAccSuccAccess().getGroup()); }
		(rule__OpAccSucc__Group__0)
		{ after(grammarAccess.getOpAccSuccAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleNot
entryRuleNot
:
{ before(grammarAccess.getNotRule()); }
	 ruleNot
{ after(grammarAccess.getNotRule()); } 
	 EOF 
;

// Rule Not
ruleNot 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getNotAccess().getNotAssignment()); }
		(rule__Not__NotAssignment)
		{ after(grammarAccess.getNotAccess().getNotAssignment()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleOpConstructeur
entryRuleOpConstructeur
:
{ before(grammarAccess.getOpConstructeurRule()); }
	 ruleOpConstructeur
{ after(grammarAccess.getOpConstructeurRule()); } 
	 EOF 
;

// Rule OpConstructeur
ruleOpConstructeur 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getOpConstructeurAccess().getGroup()); }
		(rule__OpConstructeur__Group__0)
		{ after(grammarAccess.getOpConstructeurAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleCOMPARATEUR
entryRuleCOMPARATEUR
:
{ before(grammarAccess.getCOMPARATEURRule()); }
	 ruleCOMPARATEUR
{ after(grammarAccess.getCOMPARATEURRule()); } 
	 EOF 
;

// Rule COMPARATEUR
ruleCOMPARATEUR 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getCOMPARATEURAccess().getAlternatives()); }
		(rule__COMPARATEUR__Alternatives)
		{ after(grammarAccess.getCOMPARATEURAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Commande__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getCommandeAccess().getCommandeAssignment_0()); }
		(rule__Commande__CommandeAssignment_0)
		{ after(grammarAccess.getCommandeAccess().getCommandeAssignment_0()); }
	)
	|
	(
		{ before(grammarAccess.getCommandeAccess().getCommandeAssignment_1()); }
		(rule__Commande__CommandeAssignment_1)
		{ after(grammarAccess.getCommandeAccess().getCommandeAssignment_1()); }
	)
	|
	(
		{ before(grammarAccess.getCommandeAccess().getCommandeAssignment_2()); }
		(rule__Commande__CommandeAssignment_2)
		{ after(grammarAccess.getCommandeAccess().getCommandeAssignment_2()); }
	)
	|
	(
		{ before(grammarAccess.getCommandeAccess().getCommandeAssignment_3()); }
		(rule__Commande__CommandeAssignment_3)
		{ after(grammarAccess.getCommandeAccess().getCommandeAssignment_3()); }
	)
	|
	(
		{ before(grammarAccess.getCommandeAccess().getCommandeAssignment_4()); }
		(rule__Commande__CommandeAssignment_4)
		{ after(grammarAccess.getCommandeAccess().getCommandeAssignment_4()); }
	)
	|
	(
		{ before(grammarAccess.getCommandeAccess().getCommandeAssignment_5()); }
		(rule__Commande__CommandeAssignment_5)
		{ after(grammarAccess.getCommandeAccess().getCommandeAssignment_5()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Expression__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getExpressionAccess().getCondAssignment_0()); }
		(rule__Expression__CondAssignment_0)
		{ after(grammarAccess.getExpressionAccess().getCondAssignment_0()); }
	)
	|
	(
		{ before(grammarAccess.getExpressionAccess().getExprsAssignment_1()); }
		(rule__Expression__ExprsAssignment_1)
		{ after(grammarAccess.getExpressionAccess().getExprsAssignment_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ExprSimple__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getExprSimpleAccess().getNilAssignment_0()); }
		(rule__ExprSimple__NilAssignment_0)
		{ after(grammarAccess.getExprSimpleAccess().getNilAssignment_0()); }
	)
	|
	(
		{ before(grammarAccess.getExprSimpleAccess().getVariableAssignment_1()); }
		(rule__ExprSimple__VariableAssignment_1)
		{ after(grammarAccess.getExprSimpleAccess().getVariableAssignment_1()); }
	)
	|
	(
		{ before(grammarAccess.getExprSimpleAccess().getAbinAssignment_2()); }
		(rule__ExprSimple__AbinAssignment_2)
		{ after(grammarAccess.getExprSimpleAccess().getAbinAssignment_2()); }
	)
	|
	(
		{ before(grammarAccess.getExprSimpleAccess().getSymbAssignment_3()); }
		(rule__ExprSimple__SymbAssignment_3)
		{ after(grammarAccess.getExprSimpleAccess().getSymbAssignment_3()); }
	)
	|
	(
		{ before(grammarAccess.getExprSimpleAccess().getAccsuccAssignment_4()); }
		(rule__ExprSimple__AccsuccAssignment_4)
		{ after(grammarAccess.getExprSimpleAccess().getAccsuccAssignment_4()); }
	)
	|
	(
		{ before(grammarAccess.getExprSimpleAccess().getElemSimpleAssignment_5()); }
		(rule__ExprSimple__ElemSimpleAssignment_5)
		{ after(grammarAccess.getExprSimpleAccess().getElemSimpleAssignment_5()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Condition__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getConditionAccess().getGroup_0()); }
		(rule__Condition__Group_0__0)
		{ after(grammarAccess.getConditionAccess().getGroup_0()); }
	)
	|
	(
		{ before(grammarAccess.getConditionAccess().getGroup_1()); }
		(rule__Condition__Group_1__0)
		{ after(grammarAccess.getConditionAccess().getGroup_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__OpAccSucc__Alternatives_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getOpAccSuccAccess().getOpAssignment_1_0()); }
		(rule__OpAccSucc__OpAssignment_1_0)
		{ after(grammarAccess.getOpAccSuccAccess().getOpAssignment_1_0()); }
	)
	|
	(
		{ before(grammarAccess.getOpAccSuccAccess().getOpAssignment_1_1()); }
		(rule__OpAccSucc__OpAssignment_1_1)
		{ after(grammarAccess.getOpAccSuccAccess().getOpAssignment_1_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__OpConstructeur__Alternatives_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getOpConstructeurAccess().getOpAssignment_1_0()); }
		(rule__OpConstructeur__OpAssignment_1_0)
		{ after(grammarAccess.getOpConstructeurAccess().getOpAssignment_1_0()); }
	)
	|
	(
		{ before(grammarAccess.getOpConstructeurAccess().getOpAssignment_1_1()); }
		(rule__OpConstructeur__OpAssignment_1_1)
		{ after(grammarAccess.getOpConstructeurAccess().getOpAssignment_1_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__COMPARATEUR__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getCOMPARATEURAccess().getComparateurAssignment_0()); }
		(rule__COMPARATEUR__ComparateurAssignment_0)
		{ after(grammarAccess.getCOMPARATEURAccess().getComparateurAssignment_0()); }
	)
	|
	(
		{ before(grammarAccess.getCOMPARATEURAccess().getComparateurAssignment_1()); }
		(rule__COMPARATEUR__ComparateurAssignment_1)
		{ after(grammarAccess.getCOMPARATEURAccess().getComparateurAssignment_1()); }
	)
	|
	(
		{ before(grammarAccess.getCOMPARATEURAccess().getComparateurAssignment_2()); }
		(rule__COMPARATEUR__ComparateurAssignment_2)
		{ after(grammarAccess.getCOMPARATEURAccess().getComparateurAssignment_2()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Fonction__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Fonction__Group__0__Impl
	rule__Fonction__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Fonction__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFonctionAccess().getFunctionKeyword_0()); }
	'function'
	{ after(grammarAccess.getFonctionAccess().getFunctionKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Fonction__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Fonction__Group__1__Impl
	rule__Fonction__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Fonction__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFonctionAccess().getNomAssignment_1()); }
	(rule__Fonction__NomAssignment_1)
	{ after(grammarAccess.getFonctionAccess().getNomAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Fonction__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Fonction__Group__2__Impl
	rule__Fonction__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Fonction__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFonctionAccess().getColonKeyword_2()); }
	':'
	{ after(grammarAccess.getFonctionAccess().getColonKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Fonction__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Fonction__Group__3__Impl
	rule__Fonction__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Fonction__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFonctionAccess().getReadKeyword_3()); }
	'read'
	{ after(grammarAccess.getFonctionAccess().getReadKeyword_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Fonction__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Fonction__Group__4__Impl
	rule__Fonction__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__Fonction__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFonctionAccess().getInAssignment_4()); }
	(rule__Fonction__InAssignment_4)
	{ after(grammarAccess.getFonctionAccess().getInAssignment_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Fonction__Group__5
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Fonction__Group__5__Impl
	rule__Fonction__Group__6
;
finally {
	restoreStackSize(stackSize);
}

rule__Fonction__Group__5__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFonctionAccess().getPercentSignKeyword_5()); }
	'%'
	{ after(grammarAccess.getFonctionAccess().getPercentSignKeyword_5()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Fonction__Group__6
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Fonction__Group__6__Impl
	rule__Fonction__Group__7
;
finally {
	restoreStackSize(stackSize);
}

rule__Fonction__Group__6__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFonctionAccess().getCommandesAssignment_6()); }
	(rule__Fonction__CommandesAssignment_6)
	{ after(grammarAccess.getFonctionAccess().getCommandesAssignment_6()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Fonction__Group__7
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Fonction__Group__7__Impl
	rule__Fonction__Group__8
;
finally {
	restoreStackSize(stackSize);
}

rule__Fonction__Group__7__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFonctionAccess().getPercentSignKeyword_7()); }
	'%'
	{ after(grammarAccess.getFonctionAccess().getPercentSignKeyword_7()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Fonction__Group__8
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Fonction__Group__8__Impl
	rule__Fonction__Group__9
;
finally {
	restoreStackSize(stackSize);
}

rule__Fonction__Group__8__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFonctionAccess().getWriteKeyword_8()); }
	'write'
	{ after(grammarAccess.getFonctionAccess().getWriteKeyword_8()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Fonction__Group__9
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Fonction__Group__9__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Fonction__Group__9__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFonctionAccess().getOutAssignment_9()); }
	(rule__Fonction__OutAssignment_9)
	{ after(grammarAccess.getFonctionAccess().getOutAssignment_9()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Commandes__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Commandes__Group__0__Impl
	rule__Commandes__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Commandes__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCommandesAccess().getCommandeAssignment_0()); }
	(rule__Commandes__CommandeAssignment_0)
	{ after(grammarAccess.getCommandesAccess().getCommandeAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Commandes__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Commandes__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Commandes__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCommandesAccess().getGroup_1()); }
	(rule__Commandes__Group_1__0)*
	{ after(grammarAccess.getCommandesAccess().getGroup_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Commandes__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Commandes__Group_1__0__Impl
	rule__Commandes__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Commandes__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCommandesAccess().getSEPTerminalRuleCall_1_0()); }
	RULE_SEP
	{ after(grammarAccess.getCommandesAccess().getSEPTerminalRuleCall_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Commandes__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Commandes__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Commandes__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCommandesAccess().getCommandesAssignment_1_1()); }
	(rule__Commandes__CommandesAssignment_1_1)
	{ after(grammarAccess.getCommandesAccess().getCommandesAssignment_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Affectation__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Affectation__Group__0__Impl
	rule__Affectation__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Affectation__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAffectationAccess().getGroup_0()); }
	(rule__Affectation__Group_0__0)
	{ after(grammarAccess.getAffectationAccess().getGroup_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Affectation__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Affectation__Group__1__Impl
	rule__Affectation__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Affectation__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAffectationAccess().getColonEqualsSignKeyword_1()); }
	':='
	{ after(grammarAccess.getAffectationAccess().getColonEqualsSignKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Affectation__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Affectation__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Affectation__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAffectationAccess().getGroup_2()); }
	(rule__Affectation__Group_2__0)
	{ after(grammarAccess.getAffectationAccess().getGroup_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Affectation__Group_0__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Affectation__Group_0__0__Impl
	rule__Affectation__Group_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Affectation__Group_0__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAffectationAccess().getVariableAssignment_0_0()); }
	(rule__Affectation__VariableAssignment_0_0)
	{ after(grammarAccess.getAffectationAccess().getVariableAssignment_0_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Affectation__Group_0__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Affectation__Group_0__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Affectation__Group_0__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAffectationAccess().getGroup_0_1()); }
	(rule__Affectation__Group_0_1__0)*
	{ after(grammarAccess.getAffectationAccess().getGroup_0_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Affectation__Group_0_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Affectation__Group_0_1__0__Impl
	rule__Affectation__Group_0_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Affectation__Group_0_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAffectationAccess().getCommaKeyword_0_1_0()); }
	','
	{ after(grammarAccess.getAffectationAccess().getCommaKeyword_0_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Affectation__Group_0_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Affectation__Group_0_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Affectation__Group_0_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAffectationAccess().getVariableAssignment_0_1_1()); }
	(rule__Affectation__VariableAssignment_0_1_1)
	{ after(grammarAccess.getAffectationAccess().getVariableAssignment_0_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Affectation__Group_2__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Affectation__Group_2__0__Impl
	rule__Affectation__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Affectation__Group_2__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAffectationAccess().getElmAssignment_2_0()); }
	(rule__Affectation__ElmAssignment_2_0)
	{ after(grammarAccess.getAffectationAccess().getElmAssignment_2_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Affectation__Group_2__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Affectation__Group_2__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Affectation__Group_2__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAffectationAccess().getGroup_2_1()); }
	(rule__Affectation__Group_2_1__0)*
	{ after(grammarAccess.getAffectationAccess().getGroup_2_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Affectation__Group_2_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Affectation__Group_2_1__0__Impl
	rule__Affectation__Group_2_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Affectation__Group_2_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAffectationAccess().getCommaKeyword_2_1_0()); }
	','
	{ after(grammarAccess.getAffectationAccess().getCommaKeyword_2_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Affectation__Group_2_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Affectation__Group_2_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Affectation__Group_2_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAffectationAccess().getElmAssignment_2_1_1()); }
	(rule__Affectation__ElmAssignment_2_1_1)
	{ after(grammarAccess.getAffectationAccess().getElmAssignment_2_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__If__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__If__Group__0__Impl
	rule__If__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__If__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getIfAccess().getIfKeyword_0()); }
	'if'
	{ after(grammarAccess.getIfAccess().getIfKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__If__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__If__Group__1__Impl
	rule__If__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__If__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getIfAccess().getCondAssignment_1()); }
	(rule__If__CondAssignment_1)
	{ after(grammarAccess.getIfAccess().getCondAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__If__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__If__Group__2__Impl
	rule__If__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__If__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getIfAccess().getThenKeyword_2()); }
	'then'
	{ after(grammarAccess.getIfAccess().getThenKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__If__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__If__Group__3__Impl
	rule__If__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__If__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getIfAccess().getCmdsIfAssignment_3()); }
	(rule__If__CmdsIfAssignment_3)
	{ after(grammarAccess.getIfAccess().getCmdsIfAssignment_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__If__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__If__Group__4__Impl
	rule__If__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__If__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getIfAccess().getGroup_4()); }
	(rule__If__Group_4__0)?
	{ after(grammarAccess.getIfAccess().getGroup_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__If__Group__5
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__If__Group__5__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__If__Group__5__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getIfAccess().getFiKeyword_5()); }
	'fi'
	{ after(grammarAccess.getIfAccess().getFiKeyword_5()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__If__Group_4__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__If__Group_4__0__Impl
	rule__If__Group_4__1
;
finally {
	restoreStackSize(stackSize);
}

rule__If__Group_4__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getIfAccess().getElseKeyword_4_0()); }
	'else'
	{ after(grammarAccess.getIfAccess().getElseKeyword_4_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__If__Group_4__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__If__Group_4__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__If__Group_4__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getIfAccess().getCmdsElseAssignment_4_1()); }
	(rule__If__CmdsElseAssignment_4_1)
	{ after(grammarAccess.getIfAccess().getCmdsElseAssignment_4_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__While__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__While__Group__0__Impl
	rule__While__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__While__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getWhileAccess().getWhileKeyword_0()); }
	'while'
	{ after(grammarAccess.getWhileAccess().getWhileKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__While__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__While__Group__1__Impl
	rule__While__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__While__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getWhileAccess().getCondAssignment_1()); }
	(rule__While__CondAssignment_1)
	{ after(grammarAccess.getWhileAccess().getCondAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__While__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__While__Group__2__Impl
	rule__While__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__While__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getWhileAccess().getDoKeyword_2()); }
	'do'
	{ after(grammarAccess.getWhileAccess().getDoKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__While__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__While__Group__3__Impl
	rule__While__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__While__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getWhileAccess().getCmdsWhAssignment_3()); }
	(rule__While__CmdsWhAssignment_3)
	{ after(grammarAccess.getWhileAccess().getCmdsWhAssignment_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__While__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__While__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__While__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getWhileAccess().getOdKeyword_4()); }
	'od'
	{ after(grammarAccess.getWhileAccess().getOdKeyword_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__For__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__For__Group__0__Impl
	rule__For__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__For__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getForAccess().getForKeyword_0()); }
	'for'
	{ after(grammarAccess.getForAccess().getForKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__For__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__For__Group__1__Impl
	rule__For__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__For__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getForAccess().getCondAssignment_1()); }
	(rule__For__CondAssignment_1)
	{ after(grammarAccess.getForAccess().getCondAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__For__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__For__Group__2__Impl
	rule__For__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__For__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getForAccess().getDoKeyword_2()); }
	'do'
	{ after(grammarAccess.getForAccess().getDoKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__For__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__For__Group__3__Impl
	rule__For__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__For__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getForAccess().getCmdsForAssignment_3()); }
	(rule__For__CmdsForAssignment_3)
	{ after(grammarAccess.getForAccess().getCmdsForAssignment_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__For__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__For__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__For__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getForAccess().getOdKeyword_4()); }
	'od'
	{ after(grammarAccess.getForAccess().getOdKeyword_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__ForEach__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ForEach__Group__0__Impl
	rule__ForEach__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ForEach__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getForEachAccess().getForeachKeyword_0()); }
	'foreach'
	{ after(grammarAccess.getForEachAccess().getForeachKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ForEach__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ForEach__Group__1__Impl
	rule__ForEach__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ForEach__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getForEachAccess().getElemAssignment_1()); }
	(rule__ForEach__ElemAssignment_1)
	{ after(grammarAccess.getForEachAccess().getElemAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ForEach__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ForEach__Group__2__Impl
	rule__ForEach__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__ForEach__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getForEachAccess().getInKeyword_2()); }
	'in'
	{ after(grammarAccess.getForEachAccess().getInKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ForEach__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ForEach__Group__3__Impl
	rule__ForEach__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__ForEach__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getForEachAccess().getEnsembleAssignment_3()); }
	(rule__ForEach__EnsembleAssignment_3)
	{ after(grammarAccess.getForEachAccess().getEnsembleAssignment_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ForEach__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ForEach__Group__4__Impl
	rule__ForEach__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__ForEach__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getForEachAccess().getDoKeyword_4()); }
	'do'
	{ after(grammarAccess.getForEachAccess().getDoKeyword_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ForEach__Group__5
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ForEach__Group__5__Impl
	rule__ForEach__Group__6
;
finally {
	restoreStackSize(stackSize);
}

rule__ForEach__Group__5__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getForEachAccess().getCmdsForAssignment_5()); }
	(rule__ForEach__CmdsForAssignment_5)
	{ after(grammarAccess.getForEachAccess().getCmdsForAssignment_5()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ForEach__Group__6
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ForEach__Group__6__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ForEach__Group__6__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getForEachAccess().getOdKeyword_6()); }
	'od'
	{ after(grammarAccess.getForEachAccess().getOdKeyword_6()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Lexpr__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Lexpr__Group__0__Impl
	rule__Lexpr__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Lexpr__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getLexprAccess().getE1Assignment_0()); }
	(rule__Lexpr__E1Assignment_0)
	{ after(grammarAccess.getLexprAccess().getE1Assignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Lexpr__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Lexpr__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Lexpr__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getLexprAccess().getLexprAssignment_1()); }
	(rule__Lexpr__LexprAssignment_1)?
	{ after(grammarAccess.getLexprAccess().getLexprAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__ElemSimple__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ElemSimple__Group__0__Impl
	rule__ElemSimple__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ElemSimple__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getElemSimpleAccess().getLeftParenthesisKeyword_0()); }
	'('
	{ after(grammarAccess.getElemSimpleAccess().getLeftParenthesisKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ElemSimple__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ElemSimple__Group__1__Impl
	rule__ElemSimple__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ElemSimple__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getElemSimpleAccess().getSymbAssignment_1()); }
	(rule__ElemSimple__SymbAssignment_1)
	{ after(grammarAccess.getElemSimpleAccess().getSymbAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ElemSimple__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ElemSimple__Group__2__Impl
	rule__ElemSimple__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__ElemSimple__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getElemSimpleAccess().getLexprAssignment_2()); }
	(rule__ElemSimple__LexprAssignment_2)
	{ after(grammarAccess.getElemSimpleAccess().getLexprAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ElemSimple__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ElemSimple__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ElemSimple__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getElemSimpleAccess().getRightParenthesisKeyword_3()); }
	')'
	{ after(grammarAccess.getElemSimpleAccess().getRightParenthesisKeyword_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Condition__Group_0__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Condition__Group_0__0__Impl
	rule__Condition__Group_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Condition__Group_0__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getConditionAccess().getNotParserRuleCall_0_0()); }
	ruleNot
	{ after(grammarAccess.getConditionAccess().getNotParserRuleCall_0_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Condition__Group_0__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Condition__Group_0__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Condition__Group_0__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getConditionAccess().getExprAssignment_0_1()); }
	(rule__Condition__ExprAssignment_0_1)
	{ after(grammarAccess.getConditionAccess().getExprAssignment_0_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Condition__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Condition__Group_1__0__Impl
	rule__Condition__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Condition__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getConditionAccess().getE1Assignment_1_0()); }
	(rule__Condition__E1Assignment_1_0)
	{ after(grammarAccess.getConditionAccess().getE1Assignment_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Condition__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Condition__Group_1__1__Impl
	rule__Condition__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Condition__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getConditionAccess().getCompAssignment_1_1()); }
	(rule__Condition__CompAssignment_1_1)
	{ after(grammarAccess.getConditionAccess().getCompAssignment_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Condition__Group_1__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Condition__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Condition__Group_1__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getConditionAccess().getE2Assignment_1_2()); }
	(rule__Condition__E2Assignment_1_2)
	{ after(grammarAccess.getConditionAccess().getE2Assignment_1_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__ABin__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ABin__Group__0__Impl
	rule__ABin__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ABin__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getABinAccess().getLeftParenthesisKeyword_0()); }
	'('
	{ after(grammarAccess.getABinAccess().getLeftParenthesisKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ABin__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ABin__Group__1__Impl
	rule__ABin__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ABin__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getABinAccess().getOpAssignment_1()); }
	(rule__ABin__OpAssignment_1)
	{ after(grammarAccess.getABinAccess().getOpAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ABin__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ABin__Group__2__Impl
	rule__ABin__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__ABin__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getABinAccess().getE1Assignment_2()); }
	(rule__ABin__E1Assignment_2)
	{ after(grammarAccess.getABinAccess().getE1Assignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ABin__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ABin__Group__3__Impl
	rule__ABin__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__ABin__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getABinAccess().getE2Assignment_3()); }
	(rule__ABin__E2Assignment_3)
	{ after(grammarAccess.getABinAccess().getE2Assignment_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ABin__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ABin__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ABin__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getABinAccess().getRightParenthesisKeyword_4()); }
	')'
	{ after(grammarAccess.getABinAccess().getRightParenthesisKeyword_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__AccSucc__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__AccSucc__Group__0__Impl
	rule__AccSucc__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__AccSucc__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAccSuccAccess().getLeftParenthesisKeyword_0()); }
	'('
	{ after(grammarAccess.getAccSuccAccess().getLeftParenthesisKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__AccSucc__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__AccSucc__Group__1__Impl
	rule__AccSucc__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__AccSucc__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAccSuccAccess().getOpAssignment_1()); }
	(rule__AccSucc__OpAssignment_1)
	{ after(grammarAccess.getAccSuccAccess().getOpAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__AccSucc__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__AccSucc__Group__2__Impl
	rule__AccSucc__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__AccSucc__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAccSuccAccess().getExprAssignment_2()); }
	(rule__AccSucc__ExprAssignment_2)
	{ after(grammarAccess.getAccSuccAccess().getExprAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__AccSucc__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__AccSucc__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__AccSucc__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAccSuccAccess().getRightParenthesisKeyword_3()); }
	')'
	{ after(grammarAccess.getAccSuccAccess().getRightParenthesisKeyword_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Output__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Output__Group__0__Impl
	rule__Output__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Output__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getOutputAccess().getOutAssignment_0()); }
	(rule__Output__OutAssignment_0)
	{ after(grammarAccess.getOutputAccess().getOutAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Output__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Output__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Output__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getOutputAccess().getGroup_1()); }
	(rule__Output__Group_1__0)*
	{ after(grammarAccess.getOutputAccess().getGroup_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Output__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Output__Group_1__0__Impl
	rule__Output__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Output__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getOutputAccess().getCommaKeyword_1_0()); }
	','
	{ after(grammarAccess.getOutputAccess().getCommaKeyword_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Output__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Output__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Output__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getOutputAccess().getOutAssignment_1_1()); }
	(rule__Output__OutAssignment_1_1)
	{ after(grammarAccess.getOutputAccess().getOutAssignment_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Input__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Input__Group__0__Impl
	rule__Input__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Input__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getInputAccess().getInAssignment_0()); }
	(rule__Input__InAssignment_0)
	{ after(grammarAccess.getInputAccess().getInAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Input__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Input__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Input__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getInputAccess().getGroup_1()); }
	(rule__Input__Group_1__0)*
	{ after(grammarAccess.getInputAccess().getGroup_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Input__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Input__Group_1__0__Impl
	rule__Input__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Input__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getInputAccess().getCommaKeyword_1_0()); }
	','
	{ after(grammarAccess.getInputAccess().getCommaKeyword_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Input__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Input__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Input__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getInputAccess().getInAssignment_1_1()); }
	(rule__Input__InAssignment_1_1)
	{ after(grammarAccess.getInputAccess().getInAssignment_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__OpAccSucc__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__OpAccSucc__Group__0__Impl
	rule__OpAccSucc__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__OpAccSucc__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getOpAccSuccAccess().getOpAccSuccAction_0()); }
	()
	{ after(grammarAccess.getOpAccSuccAccess().getOpAccSuccAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__OpAccSucc__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__OpAccSucc__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__OpAccSucc__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getOpAccSuccAccess().getAlternatives_1()); }
	(rule__OpAccSucc__Alternatives_1)
	{ after(grammarAccess.getOpAccSuccAccess().getAlternatives_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__OpConstructeur__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__OpConstructeur__Group__0__Impl
	rule__OpConstructeur__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__OpConstructeur__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getOpConstructeurAccess().getOpConstructeurAction_0()); }
	()
	{ after(grammarAccess.getOpConstructeurAccess().getOpConstructeurAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__OpConstructeur__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__OpConstructeur__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__OpConstructeur__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getOpConstructeurAccess().getAlternatives_1()); }
	(rule__OpConstructeur__Alternatives_1)
	{ after(grammarAccess.getOpConstructeurAccess().getAlternatives_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Program__FonctionsAssignment
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getProgramAccess().getFonctionsFonctionParserRuleCall_0()); }
		ruleFonction
		{ after(grammarAccess.getProgramAccess().getFonctionsFonctionParserRuleCall_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Fonction__NomAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getFonctionAccess().getNomSYMBOLTerminalRuleCall_1_0()); }
		RULE_SYMBOL
		{ after(grammarAccess.getFonctionAccess().getNomSYMBOLTerminalRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Fonction__InAssignment_4
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getFonctionAccess().getInInputParserRuleCall_4_0()); }
		ruleInput
		{ after(grammarAccess.getFonctionAccess().getInInputParserRuleCall_4_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Fonction__CommandesAssignment_6
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getFonctionAccess().getCommandesCommandesParserRuleCall_6_0()); }
		ruleCommandes
		{ after(grammarAccess.getFonctionAccess().getCommandesCommandesParserRuleCall_6_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Fonction__OutAssignment_9
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getFonctionAccess().getOutOutputParserRuleCall_9_0()); }
		ruleOutput
		{ after(grammarAccess.getFonctionAccess().getOutOutputParserRuleCall_9_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Commandes__CommandeAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getCommandesAccess().getCommandeCommandeParserRuleCall_0_0()); }
		ruleCommande
		{ after(grammarAccess.getCommandesAccess().getCommandeCommandeParserRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Commandes__CommandesAssignment_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getCommandesAccess().getCommandesCommandeParserRuleCall_1_1_0()); }
		ruleCommande
		{ after(grammarAccess.getCommandesAccess().getCommandesCommandeParserRuleCall_1_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Commande__CommandeAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getCommandeAccess().getCommandeNopParserRuleCall_0_0()); }
		ruleNop
		{ after(grammarAccess.getCommandeAccess().getCommandeNopParserRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Commande__CommandeAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getCommandeAccess().getCommandeAffectationParserRuleCall_1_0()); }
		ruleAffectation
		{ after(grammarAccess.getCommandeAccess().getCommandeAffectationParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Commande__CommandeAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getCommandeAccess().getCommandeIfParserRuleCall_2_0()); }
		ruleIf
		{ after(grammarAccess.getCommandeAccess().getCommandeIfParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Commande__CommandeAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getCommandeAccess().getCommandeWhileParserRuleCall_3_0()); }
		ruleWhile
		{ after(grammarAccess.getCommandeAccess().getCommandeWhileParserRuleCall_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Commande__CommandeAssignment_4
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getCommandeAccess().getCommandeForParserRuleCall_4_0()); }
		ruleFor
		{ after(grammarAccess.getCommandeAccess().getCommandeForParserRuleCall_4_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Commande__CommandeAssignment_5
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getCommandeAccess().getCommandeForEachParserRuleCall_5_0()); }
		ruleForEach
		{ after(grammarAccess.getCommandeAccess().getCommandeForEachParserRuleCall_5_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Affectation__VariableAssignment_0_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getAffectationAccess().getVariableVariableParserRuleCall_0_0_0()); }
		ruleVariable
		{ after(grammarAccess.getAffectationAccess().getVariableVariableParserRuleCall_0_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Affectation__VariableAssignment_0_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getAffectationAccess().getVariableVariableParserRuleCall_0_1_1_0()); }
		ruleVariable
		{ after(grammarAccess.getAffectationAccess().getVariableVariableParserRuleCall_0_1_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Affectation__ElmAssignment_2_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getAffectationAccess().getElmExpressionParserRuleCall_2_0_0()); }
		ruleExpression
		{ after(grammarAccess.getAffectationAccess().getElmExpressionParserRuleCall_2_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Affectation__ElmAssignment_2_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getAffectationAccess().getElmExpressionParserRuleCall_2_1_1_0()); }
		ruleExpression
		{ after(grammarAccess.getAffectationAccess().getElmExpressionParserRuleCall_2_1_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__If__CondAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getIfAccess().getCondExpressionParserRuleCall_1_0()); }
		ruleExpression
		{ after(grammarAccess.getIfAccess().getCondExpressionParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__If__CmdsIfAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getIfAccess().getCmdsIfCommandesParserRuleCall_3_0()); }
		ruleCommandes
		{ after(grammarAccess.getIfAccess().getCmdsIfCommandesParserRuleCall_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__If__CmdsElseAssignment_4_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getIfAccess().getCmdsElseCommandesParserRuleCall_4_1_0()); }
		ruleCommandes
		{ after(grammarAccess.getIfAccess().getCmdsElseCommandesParserRuleCall_4_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__While__CondAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getWhileAccess().getCondExpressionParserRuleCall_1_0()); }
		ruleExpression
		{ after(grammarAccess.getWhileAccess().getCondExpressionParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__While__CmdsWhAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getWhileAccess().getCmdsWhCommandesParserRuleCall_3_0()); }
		ruleCommandes
		{ after(grammarAccess.getWhileAccess().getCmdsWhCommandesParserRuleCall_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__For__CondAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getForAccess().getCondExpressionParserRuleCall_1_0()); }
		ruleExpression
		{ after(grammarAccess.getForAccess().getCondExpressionParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__For__CmdsForAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getForAccess().getCmdsForCommandesParserRuleCall_3_0()); }
		ruleCommandes
		{ after(grammarAccess.getForAccess().getCmdsForCommandesParserRuleCall_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ForEach__ElemAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getForEachAccess().getElemExpressionParserRuleCall_1_0()); }
		ruleExpression
		{ after(grammarAccess.getForEachAccess().getElemExpressionParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ForEach__EnsembleAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getForEachAccess().getEnsembleExpressionParserRuleCall_3_0()); }
		ruleExpression
		{ after(grammarAccess.getForEachAccess().getEnsembleExpressionParserRuleCall_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ForEach__CmdsForAssignment_5
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getForEachAccess().getCmdsForCommandesParserRuleCall_5_0()); }
		ruleCommandes
		{ after(grammarAccess.getForEachAccess().getCmdsForCommandesParserRuleCall_5_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Nop__NopAssignment
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getNopAccess().getNopNopKeyword_0()); }
		(
			{ before(grammarAccess.getNopAccess().getNopNopKeyword_0()); }
			'nop'
			{ after(grammarAccess.getNopAccess().getNopNopKeyword_0()); }
		)
		{ after(grammarAccess.getNopAccess().getNopNopKeyword_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Expression__CondAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getExpressionAccess().getCondConditionParserRuleCall_0_0()); }
		ruleCondition
		{ after(grammarAccess.getExpressionAccess().getCondConditionParserRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Expression__ExprsAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getExpressionAccess().getExprsExprSimpleParserRuleCall_1_0()); }
		ruleExprSimple
		{ after(grammarAccess.getExpressionAccess().getExprsExprSimpleParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ExprSimple__NilAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getExprSimpleAccess().getNilNillParserRuleCall_0_0()); }
		ruleNill
		{ after(grammarAccess.getExprSimpleAccess().getNilNillParserRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ExprSimple__VariableAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getExprSimpleAccess().getVariableVariableParserRuleCall_1_0()); }
		ruleVariable
		{ after(grammarAccess.getExprSimpleAccess().getVariableVariableParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ExprSimple__AbinAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getExprSimpleAccess().getAbinABinParserRuleCall_2_0()); }
		ruleABin
		{ after(grammarAccess.getExprSimpleAccess().getAbinABinParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ExprSimple__SymbAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getExprSimpleAccess().getSymbSYMBOLTerminalRuleCall_3_0()); }
		RULE_SYMBOL
		{ after(grammarAccess.getExprSimpleAccess().getSymbSYMBOLTerminalRuleCall_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ExprSimple__AccsuccAssignment_4
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getExprSimpleAccess().getAccsuccAccSuccParserRuleCall_4_0()); }
		ruleAccSucc
		{ after(grammarAccess.getExprSimpleAccess().getAccsuccAccSuccParserRuleCall_4_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ExprSimple__ElemSimpleAssignment_5
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getExprSimpleAccess().getElemSimpleElemSimpleParserRuleCall_5_0()); }
		ruleElemSimple
		{ after(grammarAccess.getExprSimpleAccess().getElemSimpleElemSimpleParserRuleCall_5_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Variable__VariableAssignment
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getVariableAccess().getVariableMAJTerminalRuleCall_0()); }
		RULE_MAJ
		{ after(grammarAccess.getVariableAccess().getVariableMAJTerminalRuleCall_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Lexpr__E1Assignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getLexprAccess().getE1ExprSimpleParserRuleCall_0_0()); }
		ruleExprSimple
		{ after(grammarAccess.getLexprAccess().getE1ExprSimpleParserRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Lexpr__LexprAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getLexprAccess().getLexprLexprParserRuleCall_1_0()); }
		ruleLexpr
		{ after(grammarAccess.getLexprAccess().getLexprLexprParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ElemSimple__SymbAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getElemSimpleAccess().getSymbSYMBOLTerminalRuleCall_1_0()); }
		RULE_SYMBOL
		{ after(grammarAccess.getElemSimpleAccess().getSymbSYMBOLTerminalRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ElemSimple__LexprAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getElemSimpleAccess().getLexprLexprParserRuleCall_2_0()); }
		ruleLexpr
		{ after(grammarAccess.getElemSimpleAccess().getLexprLexprParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Condition__ExprAssignment_0_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getConditionAccess().getExprExpressionParserRuleCall_0_1_0()); }
		ruleExpression
		{ after(grammarAccess.getConditionAccess().getExprExpressionParserRuleCall_0_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Condition__E1Assignment_1_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getConditionAccess().getE1ExprSimpleParserRuleCall_1_0_0()); }
		ruleExprSimple
		{ after(grammarAccess.getConditionAccess().getE1ExprSimpleParserRuleCall_1_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Condition__CompAssignment_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getConditionAccess().getCompCOMPARATEURParserRuleCall_1_1_0()); }
		ruleCOMPARATEUR
		{ after(grammarAccess.getConditionAccess().getCompCOMPARATEURParserRuleCall_1_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Condition__E2Assignment_1_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getConditionAccess().getE2ExpressionParserRuleCall_1_2_0()); }
		ruleExpression
		{ after(grammarAccess.getConditionAccess().getE2ExpressionParserRuleCall_1_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ABin__OpAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getABinAccess().getOpOpConstructeurParserRuleCall_1_0()); }
		ruleOpConstructeur
		{ after(grammarAccess.getABinAccess().getOpOpConstructeurParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ABin__E1Assignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getABinAccess().getE1ExpressionParserRuleCall_2_0()); }
		ruleExpression
		{ after(grammarAccess.getABinAccess().getE1ExpressionParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ABin__E2Assignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getABinAccess().getE2ExpressionParserRuleCall_3_0()); }
		ruleExpression
		{ after(grammarAccess.getABinAccess().getE2ExpressionParserRuleCall_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__AccSucc__OpAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getAccSuccAccess().getOpOpAccSuccParserRuleCall_1_0()); }
		ruleOpAccSucc
		{ after(grammarAccess.getAccSuccAccess().getOpOpAccSuccParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__AccSucc__ExprAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getAccSuccAccess().getExprExprSimpleParserRuleCall_2_0()); }
		ruleExprSimple
		{ after(grammarAccess.getAccSuccAccess().getExprExprSimpleParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Output__OutAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getOutputAccess().getOutMAJTerminalRuleCall_0_0()); }
		RULE_MAJ
		{ after(grammarAccess.getOutputAccess().getOutMAJTerminalRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Output__OutAssignment_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getOutputAccess().getOutMAJTerminalRuleCall_1_1_0()); }
		RULE_MAJ
		{ after(grammarAccess.getOutputAccess().getOutMAJTerminalRuleCall_1_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Input__InAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getInputAccess().getInMAJTerminalRuleCall_0_0()); }
		RULE_MAJ
		{ after(grammarAccess.getInputAccess().getInMAJTerminalRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Input__InAssignment_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getInputAccess().getInMAJTerminalRuleCall_1_1_0()); }
		RULE_MAJ
		{ after(grammarAccess.getInputAccess().getInMAJTerminalRuleCall_1_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Nill__NilAssignment
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getNillAccess().getNilNilKeyword_0()); }
		(
			{ before(grammarAccess.getNillAccess().getNilNilKeyword_0()); }
			'nil'
			{ after(grammarAccess.getNillAccess().getNilNilKeyword_0()); }
		)
		{ after(grammarAccess.getNillAccess().getNilNilKeyword_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__OpAccSucc__OpAssignment_1_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getOpAccSuccAccess().getOpHdKeyword_1_0_0()); }
		(
			{ before(grammarAccess.getOpAccSuccAccess().getOpHdKeyword_1_0_0()); }
			'hd'
			{ after(grammarAccess.getOpAccSuccAccess().getOpHdKeyword_1_0_0()); }
		)
		{ after(grammarAccess.getOpAccSuccAccess().getOpHdKeyword_1_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__OpAccSucc__OpAssignment_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getOpAccSuccAccess().getOpTlKeyword_1_1_0()); }
		(
			{ before(grammarAccess.getOpAccSuccAccess().getOpTlKeyword_1_1_0()); }
			'tl'
			{ after(grammarAccess.getOpAccSuccAccess().getOpTlKeyword_1_1_0()); }
		)
		{ after(grammarAccess.getOpAccSuccAccess().getOpTlKeyword_1_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Not__NotAssignment
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getNotAccess().getNotNotKeyword_0()); }
		(
			{ before(grammarAccess.getNotAccess().getNotNotKeyword_0()); }
			'not'
			{ after(grammarAccess.getNotAccess().getNotNotKeyword_0()); }
		)
		{ after(grammarAccess.getNotAccess().getNotNotKeyword_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__OpConstructeur__OpAssignment_1_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getOpConstructeurAccess().getOpConsKeyword_1_0_0()); }
		(
			{ before(grammarAccess.getOpConstructeurAccess().getOpConsKeyword_1_0_0()); }
			'cons'
			{ after(grammarAccess.getOpConstructeurAccess().getOpConsKeyword_1_0_0()); }
		)
		{ after(grammarAccess.getOpConstructeurAccess().getOpConsKeyword_1_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__OpConstructeur__OpAssignment_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getOpConstructeurAccess().getOpListKeyword_1_1_0()); }
		(
			{ before(grammarAccess.getOpConstructeurAccess().getOpListKeyword_1_1_0()); }
			'list'
			{ after(grammarAccess.getOpConstructeurAccess().getOpListKeyword_1_1_0()); }
		)
		{ after(grammarAccess.getOpConstructeurAccess().getOpListKeyword_1_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__COMPARATEUR__ComparateurAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getCOMPARATEURAccess().getComparateurEqualsSignQuestionMarkKeyword_0_0()); }
		(
			{ before(grammarAccess.getCOMPARATEURAccess().getComparateurEqualsSignQuestionMarkKeyword_0_0()); }
			'=?'
			{ after(grammarAccess.getCOMPARATEURAccess().getComparateurEqualsSignQuestionMarkKeyword_0_0()); }
		)
		{ after(grammarAccess.getCOMPARATEURAccess().getComparateurEqualsSignQuestionMarkKeyword_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__COMPARATEUR__ComparateurAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getCOMPARATEURAccess().getComparateurOrKeyword_1_0()); }
		(
			{ before(grammarAccess.getCOMPARATEURAccess().getComparateurOrKeyword_1_0()); }
			'or'
			{ after(grammarAccess.getCOMPARATEURAccess().getComparateurOrKeyword_1_0()); }
		)
		{ after(grammarAccess.getCOMPARATEURAccess().getComparateurOrKeyword_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__COMPARATEUR__ComparateurAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getCOMPARATEURAccess().getComparateurAndKeyword_2_0()); }
		(
			{ before(grammarAccess.getCOMPARATEURAccess().getComparateurAndKeyword_2_0()); }
			'and'
			{ after(grammarAccess.getCOMPARATEURAccess().getComparateurAndKeyword_2_0()); }
		)
		{ after(grammarAccess.getCOMPARATEURAccess().getComparateurAndKeyword_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

RULE_SEP : ';';

RULE_MAJ : 'A'..'Z' ('A'..'Z'|'a'..'z')*;

RULE_SYMBOL : 'a'..'z' ('A'..'Z'|'a'..'z'|'0'..'9')* ((('-'|'+'|'.'|'/'|'_'|'&')|'->') ('0'..'9'|'a'..'z'|'A'..'Z')+)* ('?'|'!')?;

RULE_ESPACE : '\n';

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
